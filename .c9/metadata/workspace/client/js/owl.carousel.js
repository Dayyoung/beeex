{"filter":false,"title":"owl.carousel.js","tooltip":"/client/js/owl.carousel.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":3069,"column":0},"action":"remove","lines":["/**"," * Owl carousel"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," * @todo Lazy Load Icon"," * @todo prevent animationend bubling"," * @todo itemsScaleUp"," * @todo Test Zepto"," * @todo stagePadding calculate wrong active classes"," */",";(function($, window, document, undefined) {","","\tvar drag, state, e;","","\t/**","\t * Template for status information about drag and touch events.","\t * @private","\t */","\tdrag = {","\t\tstart: 0,","\t\tstartX: 0,","\t\tstartY: 0,","\t\tcurrent: 0,","\t\tcurrentX: 0,","\t\tcurrentY: 0,","\t\toffsetX: 0,","\t\toffsetY: 0,","\t\tdistance: null,","\t\tstartTime: 0,","\t\tendTime: 0,","\t\tupdatedX: 0,","\t\ttargetEl: null","\t};","","\t/**","\t * Template for some status informations.","\t * @private","\t */","\tstate = {","\t\tisTouch: false,","\t\tisScrolling: false,","\t\tisSwiping: false,","\t\tdirection: false,","\t\tinMotion: false","\t};","","\t/**","\t * Event functions references.","\t * @private","\t */","\te = {","\t\t_onDragStart: null,","\t\t_onDragMove: null,","\t\t_onDragEnd: null,","\t\t_transitionEnd: null,","\t\t_resizer: null,","\t\t_responsiveCall: null,","\t\t_goToLoop: null,","\t\t_checkVisibile: null","\t};","","\t/**","\t * Creates a carousel.","\t * @class The Owl Carousel.","\t * @public","\t * @param {HTMLElement|jQuery} element - The element to create the carousel for.","\t * @param {Object} [options] - The options","\t */","\tfunction Owl(element, options) {","","\t\t/**","\t\t * Current settings for the carousel.","\t\t * @public","\t\t */","\t\tthis.settings = null;","","\t\t/**","\t\t * Current options set by the caller including defaults.","\t\t * @public","\t\t */","\t\tthis.options = $.extend({}, Owl.Defaults, options);","","\t\t/**","\t\t * Plugin element.","\t\t * @public","\t\t */","\t\tthis.$element = $(element);","","\t\t/**","\t\t * Caches informations about drag and touch events.","\t\t */","\t\tthis.drag = $.extend({}, drag);","","\t\t/**","\t\t * Caches some status informations.","\t\t * @protected","\t\t */","\t\tthis.state = $.extend({}, state);","","\t\t/**","\t\t * @protected","\t\t * @todo Must be documented","\t\t */","\t\tthis.e = $.extend({}, e);","","\t\t/**","\t\t * References to the running plugins of this carousel.","\t\t * @protected","\t\t */","\t\tthis._plugins = {};","","\t\t/**","\t\t * Currently suppressed events to prevent them from beeing retriggered.","\t\t * @protected","\t\t */","\t\tthis._supress = {};","","\t\t/**","\t\t * Absolute current position.","\t\t * @protected","\t\t */","\t\tthis._current = null;","","\t\t/**","\t\t * Animation speed in milliseconds.","\t\t * @protected","\t\t */","\t\tthis._speed = null;","","\t\t/**","\t\t * Coordinates of all items in pixel.","\t\t * @todo The name of this member is missleading.","\t\t * @protected","\t\t */","\t\tthis._coordinates = [];","","\t\t/**","\t\t * Current breakpoint.","\t\t * @todo Real media queries would be nice.","\t\t * @protected","\t\t */","\t\tthis._breakpoint = null;","","\t\t/**","\t\t * Current width of the plugin element.","\t\t */","\t\tthis._width = null;","","\t\t/**","\t\t * All real items.","\t\t * @protected","\t\t */","\t\tthis._items = [];","","\t\t/**","\t\t * All cloned items.","\t\t * @protected","\t\t */","\t\tthis._clones = [];","","\t\t/**","\t\t * Merge values of all items.","\t\t * @todo Maybe this could be part of a plugin.","\t\t * @protected","\t\t */","\t\tthis._mergers = [];","","\t\t/**","\t\t * Invalidated parts within the update process.","\t\t * @protected","\t\t */","\t\tthis._invalidated = {};","","\t\t/**","\t\t * Ordered list of workers for the update process.","\t\t * @protected","\t\t */","\t\tthis._pipe = [];","","\t\t$.each(Owl.Plugins, $.proxy(function(key, plugin) {","\t\t\tthis._plugins[key[0].toLowerCase() + key.slice(1)]","\t\t\t\t= new plugin(this);","\t\t}, this));","","\t\t$.each(Owl.Pipe, $.proxy(function(priority, worker) {","\t\t\tthis._pipe.push({","\t\t\t\t'filter': worker.filter,","\t\t\t\t'run': $.proxy(worker.run, this)","\t\t\t});","\t\t}, this));","","\t\tthis.setup();","\t\tthis.initialize();","\t}","","\t/**","\t * Default options for the carousel.","\t * @public","\t */","\tOwl.Defaults = {","\t\titems: 3,","\t\tloop: false,","\t\tcenter: false,","","\t\tmouseDrag: true,","\t\ttouchDrag: true,","\t\tpullDrag: true,","\t\tfreeDrag: false,","","\t\tmargin: 0,","\t\tstagePadding: 0,","","\t\tmerge: false,","\t\tmergeFit: true,","\t\tautoWidth: false,","","\t\tstartPosition: 0,","\t\trtl: false,","","\t\tsmartSpeed: 250,","\t\tfluidSpeed: false,","\t\tdragEndSpeed: false,","","\t\tresponsive: {},","\t\tresponsiveRefreshRate: 200,","\t\tresponsiveBaseElement: window,","\t\tresponsiveClass: false,","","\t\tfallbackEasing: 'swing',","","\t\tinfo: false,","","\t\tnestedItemSelector: false,","\t\titemElement: 'div',","\t\tstageElement: 'div',","","\t\t// Classes and Names","\t\tthemeClass: 'owl-theme',","\t\tbaseClass: 'owl-carousel',","\t\titemClass: 'owl-item',","\t\tcenterClass: 'center',","\t\tactiveClass: 'active'","\t};","","\t/**","\t * Enumeration for width.","\t * @public","\t * @readonly","\t * @enum {String}","\t */","\tOwl.Width = {","\t\tDefault: 'default',","\t\tInner: 'inner',","\t\tOuter: 'outer'","\t};","","\t/**","\t * Contains all registered plugins.","\t * @public","\t */","\tOwl.Plugins = {};","","\t/**","\t * Update pipe.","\t */","\tOwl.Pipe = [ {","\t\tfilter: [ 'width', 'items', 'settings' ],","\t\trun: function(cache) {","\t\t\tcache.current = this._items && this._items[this.relative(this._current)];","\t\t}","\t}, {","\t\tfilter: [ 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar cached = this._clones,","\t\t\t\tclones = this.$stage.children('.cloned');","","\t\t\tif (clones.length !== cached.length || (!this.settings.loop && cached.length > 0)) {","\t\t\t\tthis.$stage.children('.cloned').remove();","\t\t\t\tthis._clones = [];","\t\t\t}","\t\t}","\t}, {","\t\tfilter: [ 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar i, n,","\t\t\t\tclones = this._clones,","\t\t\t\titems = this._items,","\t\t\t\tdelta = this.settings.loop ? clones.length - Math.max(this.settings.items * 2, 4) : 0;","","\t\t\tfor (i = 0, n = Math.abs(delta / 2); i < n; i++) {","\t\t\t\tif (delta > 0) {","\t\t\t\t\tthis.$stage.children().eq(items.length + clones.length - 1).remove();","\t\t\t\t\tclones.pop();","\t\t\t\t\tthis.$stage.children().eq(0).remove();","\t\t\t\t\tclones.pop();","\t\t\t\t} else {","\t\t\t\t\tclones.push(clones.length / 2);","\t\t\t\t\tthis.$stage.append(items[clones[clones.length - 1]].clone().addClass('cloned'));","\t\t\t\t\tclones.push(items.length - 1 - (clones.length - 1) / 2);","\t\t\t\t\tthis.$stage.prepend(items[clones[clones.length - 1]].clone().addClass('cloned'));","\t\t\t\t}","\t\t\t}","\t\t}","\t}, {","\t\tfilter: [ 'width', 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar rtl = (this.settings.rtl ? 1 : -1),","\t\t\t\twidth = (this.width() / this.settings.items).toFixed(3),","\t\t\t\tcoordinate = 0, merge, i, n;","","\t\t\tthis._coordinates = [];","\t\t\tfor (i = 0, n = this._clones.length + this._items.length; i < n; i++) {","\t\t\t\tmerge = this._mergers[this.relative(i)];","\t\t\t\tmerge = (this.settings.mergeFit && Math.min(merge, this.settings.items)) || merge;","\t\t\t\tcoordinate += (this.settings.autoWidth ? this._items[this.relative(i)].width() + this.settings.margin : width * merge) * rtl;","","\t\t\t\tthis._coordinates.push(coordinate);","\t\t\t}","\t\t}","\t}, {","\t\tfilter: [ 'width', 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar i, n, width = (this.width() / this.settings.items).toFixed(3), css = {","\t\t\t\t'width': Math.abs(this._coordinates[this._coordinates.length - 1]) + this.settings.stagePadding * 2,","\t\t\t\t'padding-left': this.settings.stagePadding || '',","\t\t\t\t'padding-right': this.settings.stagePadding || ''","\t\t\t};","","\t\t\tthis.$stage.css(css);","","\t\t\tcss = { 'width': this.settings.autoWidth ? 'auto' : width - this.settings.margin };","\t\t\tcss[this.settings.rtl ? 'margin-left' : 'margin-right'] = this.settings.margin;","","\t\t\tif (!this.settings.autoWidth && $.grep(this._mergers, function(v) { return v > 1 }).length > 0) {","\t\t\t\tfor (i = 0, n = this._coordinates.length; i < n; i++) {","\t\t\t\t\tcss.width = Math.abs(this._coordinates[i]) - Math.abs(this._coordinates[i - 1] || 0) - this.settings.margin;","\t\t\t\t\tthis.$stage.children().eq(i).css(css);","\t\t\t\t}","\t\t\t} else {","\t\t\t\tthis.$stage.children().css(css);","\t\t\t}","\t\t}","\t}, {","\t\tfilter: [ 'width', 'items', 'settings' ],","\t\trun: function(cache) {","\t\t\tcache.current && this.reset(this.$stage.children().index(cache.current));","\t\t}","\t}, {","\t\tfilter: [ 'position' ],","\t\trun: function() {","\t\t\tthis.animate(this.coordinates(this._current));","\t\t}","\t}, {","\t\tfilter: [ 'width', 'position', 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar rtl = this.settings.rtl ? 1 : -1,","\t\t\t\tpadding = this.settings.stagePadding * 2,","\t\t\t\tbegin = this.coordinates(this.current()) + padding,","\t\t\t\tend = begin + this.width() * rtl,","\t\t\t\tinner, outer, matches = [], i, n;","","\t\t\tfor (i = 0, n = this._coordinates.length; i < n; i++) {","\t\t\t\tinner = this._coordinates[i - 1] || 0;","\t\t\t\touter = Math.abs(this._coordinates[i]) + padding * rtl;","","\t\t\t\tif ((this.op(inner, '<=', begin) && (this.op(inner, '>', end)))","\t\t\t\t\t|| (this.op(outer, '<', begin) && this.op(outer, '>', end))) {","\t\t\t\t\tmatches.push(i);","\t\t\t\t}","\t\t\t}","","\t\t\tthis.$stage.children('.' + this.settings.activeClass).removeClass(this.settings.activeClass);","\t\t\tthis.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass(this.settings.activeClass);","","\t\t\tif (this.settings.center) {","\t\t\t\tthis.$stage.children('.' + this.settings.centerClass).removeClass(this.settings.centerClass);","\t\t\t\tthis.$stage.children().eq(this.current()).addClass(this.settings.centerClass);","\t\t\t}","\t\t}","\t} ];","","\t/**","\t * Initializes the carousel.","\t * @protected","\t */","\tOwl.prototype.initialize = function() {","\t\tthis.trigger('initialize');","","\t\tthis.$element","\t\t\t.addClass(this.settings.baseClass)","\t\t\t.addClass(this.settings.themeClass)","\t\t\t.toggleClass('owl-rtl', this.settings.rtl);","","\t\t// check support","\t\tthis.browserSupport();","","\t\tif (this.settings.autoWidth && this.state.imagesLoaded !== true) {","\t\t\tvar imgs, nestedSelector, width;","\t\t\timgs = this.$element.find('img');","\t\t\tnestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;","\t\t\twidth = this.$element.children(nestedSelector).width();","","\t\t\tif (imgs.length && width <= 0) {","\t\t\t\tthis.preloadAutoWidthImages(imgs);","\t\t\t\treturn false;","\t\t\t}","\t\t}","","\t\tthis.$element.addClass('owl-loading');","","\t\t// create stage","\t\tthis.$stage = $('<' + this.settings.stageElement + ' class=\"owl-stage\"/>')","\t\t\t.wrap('<div class=\"owl-stage-outer\">');","","\t\t// append stage","\t\tthis.$element.append(this.$stage.parent());","","\t\t// append content","\t\tthis.replace(this.$element.children().not(this.$stage.parent()));","","\t\t// set view width","\t\tthis._width = this.$element.width();","","\t\t// update view","\t\tthis.refresh();","","\t\tthis.$element.removeClass('owl-loading').addClass('owl-loaded');","","\t\t// attach generic events","\t\tthis.eventsCall();","","\t\t// attach generic events","\t\tthis.internalEvents();","","\t\t// attach custom control events","\t\tthis.addTriggerableEvents();","","\t\tthis.trigger('initialized');","\t};","","\t/**","\t * Setups the current settings.","\t * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?","\t * @todo Support for media queries by using `matchMedia` would be nice.","\t * @public","\t */","\tOwl.prototype.setup = function() {","\t\tvar viewport = this.viewport(),","\t\t\toverwrites = this.options.responsive,","\t\t\tmatch = -1,","\t\t\tsettings = null;","","\t\tif (!overwrites) {","\t\t\tsettings = $.extend({}, this.options);","\t\t} else {","\t\t\t$.each(overwrites, function(breakpoint) {","\t\t\t\tif (breakpoint <= viewport && breakpoint > match) {","\t\t\t\t\tmatch = Number(breakpoint);","\t\t\t\t}","\t\t\t});","","\t\t\tsettings = $.extend({}, this.options, overwrites[match]);","\t\t\tdelete settings.responsive;","","\t\t\t// responsive class","\t\t\tif (settings.responsiveClass) {","\t\t\t\tthis.$element.attr('class', function(i, c) {","\t\t\t\t\treturn c.replace(/\\b owl-responsive-\\S+/g, '');","\t\t\t\t}).addClass('owl-responsive-' + match);","\t\t\t}","\t\t}","","\t\tif (this.settings === null || this._breakpoint !== match) {","\t\t\tthis.trigger('change', { property: { name: 'settings', value: settings } });","\t\t\tthis._breakpoint = match;","\t\t\tthis.settings = settings;","\t\t\tthis.invalidate('settings');","\t\t\tthis.trigger('changed', { property: { name: 'settings', value: this.settings } });","\t\t}","\t};","","\t/**","\t * Updates option logic if necessery.","\t * @protected","\t */","\tOwl.prototype.optionsLogic = function() {","\t\t// Toggle Center class","\t\tthis.$element.toggleClass('owl-center', this.settings.center);","","\t\t// if items number is less than in body","\t\tif (this.settings.loop && this._items.length < this.settings.items) {","\t\t\tthis.settings.loop = false;","\t\t}","","\t\tif (this.settings.autoWidth) {","\t\t\tthis.settings.stagePadding = false;","\t\t\tthis.settings.merge = false;","\t\t}","\t};","","\t/**","\t * Prepares an item before add.","\t * @todo Rename event parameter `content` to `item`.","\t * @protected","\t * @returns {jQuery|HTMLElement} - The item container.","\t */","\tOwl.prototype.prepare = function(item) {","\t\tvar event = this.trigger('prepare', { content: item });","","\t\tif (!event.data) {","\t\t\tevent.data = $('<' + this.settings.itemElement + '/>')","\t\t\t\t.addClass(this.settings.itemClass).append(item)","\t\t}","","\t\tthis.trigger('prepared', { content: event.data });","","\t\treturn event.data;","\t};","","\t/**","\t * Updates the view.","\t * @public","\t */","\tOwl.prototype.update = function() {","\t\tvar i = 0,","\t\t\tn = this._pipe.length,","\t\t\tfilter = $.proxy(function(p) { return this[p] }, this._invalidated),","\t\t\tcache = {};","","\t\twhile (i < n) {","\t\t\tif (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {","\t\t\t\tthis._pipe[i].run(cache);","\t\t\t}","\t\t\ti++;","\t\t}","","\t\tthis._invalidated = {};","\t};","","\t/**","\t * Gets the width of the view.","\t * @public","\t * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.","\t * @returns {Number} - The width of the view in pixel.","\t */","\tOwl.prototype.width = function(dimension) {","\t\tdimension = dimension || Owl.Width.Default;","\t\tswitch (dimension) {","\t\t\tcase Owl.Width.Inner:","\t\t\tcase Owl.Width.Outer:","\t\t\t\treturn this._width;","\t\t\tdefault:","\t\t\t\treturn this._width - this.settings.stagePadding * 2 + this.settings.margin;","\t\t}","\t};","","\t/**","\t * Refreshes the carousel primarily for adaptive purposes.","\t * @public","\t */","\tOwl.prototype.refresh = function() {","\t\tif (this._items.length === 0) {","\t\t\treturn false;","\t\t}","","\t\tvar start = new Date().getTime();","","\t\tthis.trigger('refresh');","","\t\tthis.setup();","","\t\tthis.optionsLogic();","","\t\t// hide and show methods helps here to set a proper widths,","\t\t// this prevents scrollbar to be calculated in stage width","\t\tthis.$stage.addClass('owl-refresh');","","\t\tthis.update();","","\t\tthis.$stage.removeClass('owl-refresh');","","\t\tthis.state.orientation = window.orientation;","","\t\tthis.watchVisibility();","","\t\tthis.trigger('refreshed');","\t};","","\t/**","\t * Save internal event references and add event based functions.","\t * @protected","\t */","\tOwl.prototype.eventsCall = function() {","\t\t// Save events references","\t\tthis.e._onDragStart = $.proxy(function(e) {","\t\t\tthis.onDragStart(e);","\t\t}, this);","\t\tthis.e._onDragMove = $.proxy(function(e) {","\t\t\tthis.onDragMove(e);","\t\t}, this);","\t\tthis.e._onDragEnd = $.proxy(function(e) {","\t\t\tthis.onDragEnd(e);","\t\t}, this);","\t\tthis.e._onResize = $.proxy(function(e) {","\t\t\tthis.onResize(e);","\t\t}, this);","\t\tthis.e._transitionEnd = $.proxy(function(e) {","\t\t\tthis.transitionEnd(e);","\t\t}, this);","\t\tthis.e._preventClick = $.proxy(function(e) {","\t\t\tthis.preventClick(e);","\t\t}, this);","\t};","","\t/**","\t * Checks window `resize` event.","\t * @protected","\t */","\tOwl.prototype.onThrottledResize = function() {","\t\twindow.clearTimeout(this.resizeTimer);","\t\tthis.resizeTimer = window.setTimeout(this.e._onResize, this.settings.responsiveRefreshRate);","\t};","","\t/**","\t * Checks window `resize` event.","\t * @protected","\t */","\tOwl.prototype.onResize = function() {","\t\tif (!this._items.length) {","\t\t\treturn false;","\t\t}","","\t\tif (this._width === this.$element.width()) {","\t\t\treturn false;","\t\t}","","\t\tif (this.trigger('resize').isDefaultPrevented()) {","\t\t\treturn false;","\t\t}","","\t\tthis._width = this.$element.width();","","\t\tthis.invalidate('width');","","\t\tthis.refresh();","","\t\tthis.trigger('resized');","\t};","","\t/**","\t * Checks for touch/mouse drag event type and add run event handlers.","\t * @protected","\t */","\tOwl.prototype.eventsRouter = function(event) {","\t\tvar type = event.type;","","\t\tif (type === \"mousedown\" || type === \"touchstart\") {","\t\t\tthis.onDragStart(event);","\t\t} else if (type === \"mousemove\" || type === \"touchmove\") {","\t\t\tthis.onDragMove(event);","\t\t} else if (type === \"mouseup\" || type === \"touchend\") {","\t\t\tthis.onDragEnd(event);","\t\t} else if (type === \"touchcancel\") {","\t\t\tthis.onDragEnd(event);","\t\t}","\t};","","\t/**","\t * Checks for touch/mouse drag options and add necessery event handlers.","\t * @protected","\t */","\tOwl.prototype.internalEvents = function() {","\t\tvar isTouch = isTouchSupport(),","\t\t\tisTouchIE = isTouchSupportIE();","","\t\tif (this.settings.mouseDrag){","\t\t\tthis.$stage.on('mousedown', $.proxy(function(event) { this.eventsRouter(event) }, this));","\t\t\tthis.$stage.on('dragstart', function() { return false });","\t\t\tthis.$stage.get(0).onselectstart = function() { return false };","\t\t} else {","\t\t\tthis.$element.addClass('owl-text-select-on');","\t\t}","","\t\tif (this.settings.touchDrag && !isTouchIE){","\t\t\tthis.$stage.on('touchstart touchcancel', $.proxy(function(event) { this.eventsRouter(event) }, this));","\t\t}","","\t\t// catch transitionEnd event","\t\tif (this.transitionEndVendor) {","\t\t\tthis.on(this.$stage.get(0), this.transitionEndVendor, this.e._transitionEnd, false);","\t\t}","","\t\t// responsive","\t\tif (this.settings.responsive !== false) {","\t\t\tthis.on(window, 'resize', $.proxy(this.onThrottledResize, this));","\t\t}","\t};","","\t/**","\t * Handles touchstart/mousedown event.","\t * @protected","\t * @param {Event} event - The event arguments.","\t */","\tOwl.prototype.onDragStart = function(event) {","\t\tvar ev, isTouchEvent, pageX, pageY, animatedPos;","","\t\tev = event.originalEvent || event || window.event;","","\t\t// prevent right click","\t\tif (ev.which === 3 || this.state.isTouch) {","\t\t\treturn false;","\t\t}","","\t\tif (ev.type === 'mousedown') {","\t\t\tthis.$stage.addClass('owl-grab');","\t\t}","","\t\tthis.trigger('drag');","\t\tthis.drag.startTime = new Date().getTime();","\t\tthis.speed(0);","\t\tthis.state.isTouch = true;","\t\tthis.state.isScrolling = false;","\t\tthis.state.isSwiping = false;","\t\tthis.drag.distance = 0;","","\t\tpageX = getTouches(ev).x;","\t\tpageY = getTouches(ev).y;","","\t\t// get stage position left","\t\tthis.drag.offsetX = this.$stage.position().left;","\t\tthis.drag.offsetY = this.$stage.position().top;","","\t\tif (this.settings.rtl) {","\t\t\tthis.drag.offsetX = this.$stage.position().left + this.$stage.width() - this.width()","\t\t\t\t+ this.settings.margin;","\t\t}","","\t\t// catch position // ie to fix","\t\tif (this.state.inMotion && this.support3d) {","\t\t\tanimatedPos = this.getTransformProperty();","\t\t\tthis.drag.offsetX = animatedPos;","\t\t\tthis.animate(animatedPos);","\t\t\tthis.state.inMotion = true;","\t\t} else if (this.state.inMotion && !this.support3d) {","\t\t\tthis.state.inMotion = false;","\t\t\treturn false;","\t\t}","","\t\tthis.drag.startX = pageX - this.drag.offsetX;","\t\tthis.drag.startY = pageY - this.drag.offsetY;","","\t\tthis.drag.start = pageX - this.drag.startX;","\t\tthis.drag.targetEl = ev.target || ev.srcElement;","\t\tthis.drag.updatedX = this.drag.start;","","\t\t// to do/check","\t\t// prevent links and images dragging;","\t\tif (this.drag.targetEl.tagName === \"IMG\" || this.drag.targetEl.tagName === \"A\") {","\t\t\tthis.drag.targetEl.draggable = false;","\t\t}","","\t\t$(document).on('mousemove.owl.dragEvents mouseup.owl.dragEvents touchmove.owl.dragEvents touchend.owl.dragEvents', $.proxy(function(event) {this.eventsRouter(event)},this));","\t};","","\t/**","\t * Handles the touchmove/mousemove events.","\t * @todo Simplify","\t * @protected","\t * @param {Event} event - The event arguments.","\t */","\tOwl.prototype.onDragMove = function(event) {","\t\tvar ev, isTouchEvent, pageX, pageY, minValue, maxValue, pull;","","\t\tif (!this.state.isTouch) {","\t\t\treturn;","\t\t}","","\t\tif (this.state.isScrolling) {","\t\t\treturn;","\t\t}","","\t\tev = event.originalEvent || event || window.event;","","\t\tpageX = getTouches(ev).x;","\t\tpageY = getTouches(ev).y;","","\t\t// Drag Direction","\t\tthis.drag.currentX = pageX - this.drag.startX;","\t\tthis.drag.currentY = pageY - this.drag.startY;","\t\tthis.drag.distance = this.drag.currentX - this.drag.offsetX;","","\t\t// Check move direction","\t\tif (this.drag.distance < 0) {","\t\t\tthis.state.direction = this.settings.rtl ? 'right' : 'left';","\t\t} else if (this.drag.distance > 0) {","\t\t\tthis.state.direction = this.settings.rtl ? 'left' : 'right';","\t\t}","\t\t// Loop","\t\tif (this.settings.loop) {","\t\t\tif (this.op(this.drag.currentX, '>', this.coordinates(this.minimum())) && this.state.direction === 'right') {","\t\t\t\tthis.drag.currentX -= (this.settings.center && this.coordinates(0)) - this.coordinates(this._items.length);","\t\t\t} else if (this.op(this.drag.currentX, '<', this.coordinates(this.maximum())) && this.state.direction === 'left') {","\t\t\t\tthis.drag.currentX += (this.settings.center && this.coordinates(0)) - this.coordinates(this._items.length);","\t\t\t}","\t\t} else {","\t\t\t// pull","\t\t\tminValue = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());","\t\t\tmaxValue = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());","\t\t\tpull = this.settings.pullDrag ? this.drag.distance / 5 : 0;","\t\t\tthis.drag.currentX = Math.max(Math.min(this.drag.currentX, minValue + pull), maxValue + pull);","\t\t}","","\t\t// Lock browser if swiping horizontal","","\t\tif ((this.drag.distance > 8 || this.drag.distance < -8)) {","\t\t\tif (ev.preventDefault !== undefined) {","\t\t\t\tev.preventDefault();","\t\t\t} else {","\t\t\t\tev.returnValue = false;","\t\t\t}","\t\t\tthis.state.isSwiping = true;","\t\t}","","\t\tthis.drag.updatedX = this.drag.currentX;","","\t\t// Lock Owl if scrolling","\t\tif ((this.drag.currentY > 16 || this.drag.currentY < -16) && this.state.isSwiping === false) {","\t\t\tthis.state.isScrolling = true;","\t\t\tthis.drag.updatedX = this.drag.start;","\t\t}","","\t\tthis.animate(this.drag.updatedX);","\t};","","\t/**","\t * Handles the touchend/mouseup events.","\t * @protected","\t */","\tOwl.prototype.onDragEnd = function(event) {","\t\tvar compareTimes, distanceAbs, closest;","","\t\tif (!this.state.isTouch) {","\t\t\treturn;","\t\t}","","\t\tif (event.type === 'mouseup') {","\t\t\tthis.$stage.removeClass('owl-grab');","\t\t}","","\t\tthis.trigger('dragged');","","\t\t// prevent links and images dragging;","\t\tthis.drag.targetEl.removeAttribute(\"draggable\");","","\t\t// remove drag event listeners","","\t\tthis.state.isTouch = false;","\t\tthis.state.isScrolling = false;","\t\tthis.state.isSwiping = false;","","\t\t// to check","\t\tif (this.drag.distance === 0 && this.state.inMotion !== true) {","\t\t\tthis.state.inMotion = false;","\t\t\treturn false;","\t\t}","","\t\t// prevent clicks while scrolling","","\t\tthis.drag.endTime = new Date().getTime();","\t\tcompareTimes = this.drag.endTime - this.drag.startTime;","\t\tdistanceAbs = Math.abs(this.drag.distance);","","\t\t// to test","\t\tif (distanceAbs > 3 || compareTimes > 300) {","\t\t\tthis.removeClick(this.drag.targetEl);","\t\t}","","\t\tclosest = this.closest(this.drag.updatedX);","","\t\tthis.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);","\t\tthis.current(closest);","\t\tthis.invalidate('position');","\t\tthis.update();","","\t\t// if pullDrag is off then fire transitionEnd event manually when stick","\t\t// to border","\t\tif (!this.settings.pullDrag && this.drag.updatedX === this.coordinates(closest)) {","\t\t\tthis.transitionEnd();","\t\t}","","\t\tthis.drag.distance = 0;","","\t\t$(document).off('.owl.dragEvents');","\t};","","\t/**","\t * Attaches `preventClick` to disable link while swipping.","\t * @protected","\t * @param {HTMLElement} [target] - The target of the `click` event.","\t */","\tOwl.prototype.removeClick = function(target) {","\t\tthis.drag.targetEl = target;","\t\t$(target).on('click.preventClick', this.e._preventClick);","\t\t// to make sure click is removed:","\t\twindow.setTimeout(function() {","\t\t\t$(target).off('click.preventClick');","\t\t}, 300);","\t};","","\t/**","\t * Suppresses click event.","\t * @protected","\t * @param {Event} ev - The event arguments.","\t */","\tOwl.prototype.preventClick = function(ev) {","\t\tif (ev.preventDefault) {","\t\t\tev.preventDefault();","\t\t} else {","\t\t\tev.returnValue = false;","\t\t}","\t\tif (ev.stopPropagation) {","\t\t\tev.stopPropagation();","\t\t}","\t\t$(ev.target).off('click.preventClick');","\t};","","\t/**","\t * Catches stage position while animate (only CSS3).","\t * @protected","\t * @returns","\t */","\tOwl.prototype.getTransformProperty = function() {","\t\tvar transform, matrix3d;","","\t\ttransform = window.getComputedStyle(this.$stage.get(0), null).getPropertyValue(this.vendorName + 'transform');","\t\t// var transform = this.$stage.css(this.vendorName + 'transform')","\t\ttransform = transform.replace(/matrix(3d)?\\(|\\)/g, '').split(',');","\t\tmatrix3d = transform.length === 16;","","\t\treturn matrix3d !== true ? transform[4] : transform[12];","\t};","","\t/**","\t * Gets absolute position of the closest item for a coordinate.","\t * @todo Setting `freeDrag` makes `closest` not reusable. See #165.","\t * @protected","\t * @param {Number} coordinate - The coordinate in pixel.","\t * @return {Number} - The absolute position of the closest item.","\t */","\tOwl.prototype.closest = function(coordinate) {","\t\tvar position = -1, pull = 30, width = this.width(), coordinates = this.coordinates();","","\t\tif (!this.settings.freeDrag) {","\t\t\t// check closest item","\t\t\t$.each(coordinates, $.proxy(function(index, value) {","\t\t\t\tif (coordinate > value - pull && coordinate < value + pull) {","\t\t\t\t\tposition = index;","\t\t\t\t} else if (this.op(coordinate, '<', value)","\t\t\t\t\t&& this.op(coordinate, '>', coordinates[index + 1] || value - width)) {","\t\t\t\t\tposition = this.state.direction === 'left' ? index + 1 : index;","\t\t\t\t}","\t\t\t\treturn position === -1;","\t\t\t}, this));","\t\t}","","\t\tif (!this.settings.loop) {","\t\t\t// non loop boundries","\t\t\tif (this.op(coordinate, '>', coordinates[this.minimum()])) {","\t\t\t\tposition = coordinate = this.minimum();","\t\t\t} else if (this.op(coordinate, '<', coordinates[this.maximum()])) {","\t\t\t\tposition = coordinate = this.maximum();","\t\t\t}","\t\t}","","\t\treturn position;","\t};","","\t/**","\t * Animates the stage.","\t * @public","\t * @param {Number} coordinate - The coordinate in pixels.","\t */","\tOwl.prototype.animate = function(coordinate) {","\t\tthis.trigger('translate');","\t\tthis.state.inMotion = this.speed() > 0;","","\t\tif (this.support3d) {","\t\t\tthis.$stage.css({","\t\t\t\ttransform: 'translate3d(' + coordinate + 'px' + ',0px, 0px)',","\t\t\t\ttransition: (this.speed() / 1000) + 's'","\t\t\t});","\t\t} else if (this.state.isTouch) {","\t\t\tthis.$stage.css({","\t\t\t\tleft: coordinate + 'px'","\t\t\t});","\t\t} else {","\t\t\tthis.$stage.animate({","\t\t\t\tleft: coordinate","\t\t\t}, this.speed() / 1000, this.settings.fallbackEasing, $.proxy(function() {","\t\t\t\tif (this.state.inMotion) {","\t\t\t\t\tthis.transitionEnd();","\t\t\t\t}","\t\t\t}, this));","\t\t}","\t};","","\t/**","\t * Sets the absolute position of the current item.","\t * @public","\t * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.","\t * @returns {Number} - The absolute position of the current item.","\t */","\tOwl.prototype.current = function(position) {","\t\tif (position === undefined) {","\t\t\treturn this._current;","\t\t}","","\t\tif (this._items.length === 0) {","\t\t\treturn undefined;","\t\t}","","\t\tposition = this.normalize(position);","","\t\tif (this._current !== position) {","\t\t\tvar event = this.trigger('change', { property: { name: 'position', value: position } });","","\t\t\tif (event.data !== undefined) {","\t\t\t\tposition = this.normalize(event.data);","\t\t\t}","","\t\t\tthis._current = position;","","\t\t\tthis.invalidate('position');","","\t\t\tthis.trigger('changed', { property: { name: 'position', value: this._current } });","\t\t}","","\t\treturn this._current;","\t};","","\t/**","\t * Invalidates the given part of the update routine.","\t * @param {String} part - The part to invalidate.","\t */","\tOwl.prototype.invalidate = function(part) {","\t\tthis._invalidated[part] = true;","\t}","","\t/**","\t * Resets the absolute position of the current item.","\t * @public","\t * @param {Number} position - The absolute position of the new item.","\t */","\tOwl.prototype.reset = function(position) {","\t\tposition = this.normalize(position);","","\t\tif (position === undefined) {","\t\t\treturn;","\t\t}","","\t\tthis._speed = 0;","\t\tthis._current = position;","","\t\tthis.suppress([ 'translate', 'translated' ]);","","\t\tthis.animate(this.coordinates(position));","","\t\tthis.release([ 'translate', 'translated' ]);","\t};","","\t/**","\t * Normalizes an absolute or a relative position for an item.","\t * @public","\t * @param {Number} position - The absolute or relative position to normalize.","\t * @param {Boolean} [relative=false] - Whether the given position is relative or not.","\t * @returns {Number} - The normalized position.","\t */","\tOwl.prototype.normalize = function(position, relative) {","\t\tvar n = (relative ? this._items.length : this._items.length + this._clones.length);","","\t\tif (!$.isNumeric(position) || n < 1) {","\t\t\treturn undefined;","\t\t}","","\t\tif (this._clones.length) {","\t\t\tposition = ((position % n) + n) % n;","\t\t} else {","\t\t\tposition = Math.max(this.minimum(relative), Math.min(this.maximum(relative), position));","\t\t}","","\t\treturn position;","\t};","","\t/**","\t * Converts an absolute position for an item into a relative position.","\t * @public","\t * @param {Number} position - The absolute position to convert.","\t * @returns {Number} - The converted position.","\t */","\tOwl.prototype.relative = function(position) {","\t\tposition = this.normalize(position);","\t\tposition = position - this._clones.length / 2;","\t\treturn this.normalize(position, true);","\t};","","\t/**","\t * Gets the maximum position for an item.","\t * @public","\t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.","\t * @returns {Number}","\t */","\tOwl.prototype.maximum = function(relative) {","\t\tvar maximum, width, i = 0, coordinate,","\t\t\tsettings = this.settings;","","\t\tif (relative) {","\t\t\treturn this._items.length - 1;","\t\t}","","\t\tif (!settings.loop && settings.center) {","\t\t\tmaximum = this._items.length - 1;","\t\t} else if (!settings.loop && !settings.center) {","\t\t\tmaximum = this._items.length - settings.items;","\t\t} else if (settings.loop || settings.center) {","\t\t\tmaximum = this._items.length + settings.items;","\t\t} else if (settings.autoWidth || settings.merge) {","\t\t\trevert = settings.rtl ? 1 : -1;","\t\t\twidth = this.$stage.width() - this.$element.width();","\t\t\twhile (coordinate = this.coordinates(i)) {","\t\t\t\tif (coordinate * revert >= width) {","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tmaximum = ++i;","\t\t\t}","\t\t} else {","\t\t\tthrow 'Can not detect maximum absolute position.'","\t\t}","","\t\treturn maximum;","\t};","","\t/**","\t * Gets the minimum position for an item.","\t * @public","\t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.","\t * @returns {Number}","\t */","\tOwl.prototype.minimum = function(relative) {","\t\tif (relative) {","\t\t\treturn 0;","\t\t}","","\t\treturn this._clones.length / 2;","\t};","","\t/**","\t * Gets an item at the specified relative position.","\t * @public","\t * @param {Number} [position] - The relative position of the item.","\t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.","\t */","\tOwl.prototype.items = function(position) {","\t\tif (position === undefined) {","\t\t\treturn this._items.slice();","\t\t}","","\t\tposition = this.normalize(position, true);","\t\treturn this._items[position];","\t};","","\t/**","\t * Gets an item at the specified relative position.","\t * @public","\t * @param {Number} [position] - The relative position of the item.","\t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.","\t */","\tOwl.prototype.mergers = function(position) {","\t\tif (position === undefined) {","\t\t\treturn this._mergers.slice();","\t\t}","","\t\tposition = this.normalize(position, true);","\t\treturn this._mergers[position];","\t};","","\t/**","\t * Gets the absolute positions of clones for an item.","\t * @public","\t * @param {Number} [position] - The relative position of the item.","\t * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.","\t */","\tOwl.prototype.clones = function(position) {","\t\tvar odd = this._clones.length / 2,","\t\t\teven = odd + this._items.length,","\t\t\tmap = function(index) { return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2 };","","\t\tif (position === undefined) {","\t\t\treturn $.map(this._clones, function(v, i) { return map(i) });","\t\t}","","\t\treturn $.map(this._clones, function(v, i) { return v === position ? map(i) : null });","\t};","","\t/**","\t * Sets the current animation speed.","\t * @public","\t * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.","\t * @returns {Number} - The current animation speed in milliseconds.","\t */","\tOwl.prototype.speed = function(speed) {","\t\tif (speed !== undefined) {","\t\t\tthis._speed = speed;","\t\t}","","\t\treturn this._speed;","\t};","","\t/**","\t * Gets the coordinate of an item.","\t * @todo The name of this method is missleanding.","\t * @public","\t * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.","\t * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.","\t */","\tOwl.prototype.coordinates = function(position) {","\t\tvar coordinate = null;","","\t\tif (position === undefined) {","\t\t\treturn $.map(this._coordinates, $.proxy(function(coordinate, index) {","\t\t\t\treturn this.coordinates(index);","\t\t\t}, this));","\t\t}","","\t\tif (this.settings.center) {","\t\t\tcoordinate = this._coordinates[position];","\t\t\tcoordinate += (this.width() - coordinate + (this._coordinates[position - 1] || 0)) / 2 * (this.settings.rtl ? -1 : 1);","\t\t} else {","\t\t\tcoordinate = this._coordinates[position - 1] || 0;","\t\t}","","\t\treturn coordinate;","\t};","","\t/**","\t * Calculates the speed for a translation.","\t * @protected","\t * @param {Number} from - The absolute position of the start item.","\t * @param {Number} to - The absolute position of the target item.","\t * @param {Number} [factor=undefined] - The time factor in milliseconds.","\t * @returns {Number} - The time in milliseconds for the translation.","\t */","\tOwl.prototype.duration = function(from, to, factor) {","\t\treturn Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs((factor || this.settings.smartSpeed));","\t};","","\t/**","\t * Slides to the specified item.","\t * @public","\t * @param {Number} position - The position of the item.","\t * @param {Number} [speed] - The time in milliseconds for the transition.","\t */","\tOwl.prototype.to = function(position, speed) {","\t\tif (this.settings.loop) {","\t\t\tvar distance = position - this.relative(this.current()),","\t\t\t\trevert = this.current(),","\t\t\t\tbefore = this.current(),","\t\t\t\tafter = this.current() + distance,","\t\t\t\tdirection = before - after < 0 ? true : false,","\t\t\t\titems = this._clones.length + this._items.length;","","\t\t\tif (after < this.settings.items && direction === false) {","\t\t\t\trevert = before + this._items.length;","\t\t\t\tthis.reset(revert);","\t\t\t} else if (after >= items - this.settings.items && direction === true) {","\t\t\t\trevert = before - this._items.length;","\t\t\t\tthis.reset(revert);","\t\t\t}","\t\t\twindow.clearTimeout(this.e._goToLoop);","\t\t\tthis.e._goToLoop = window.setTimeout($.proxy(function() {","\t\t\t\tthis.speed(this.duration(this.current(), revert + distance, speed));","\t\t\t\tthis.current(revert + distance);","\t\t\t\tthis.update();","\t\t\t}, this), 30);","\t\t} else {","\t\t\tthis.speed(this.duration(this.current(), position, speed));","\t\t\tthis.current(position);","\t\t\tthis.update();","\t\t}","\t};","","\t/**","\t * Slides to the next item.","\t * @public","\t * @param {Number} [speed] - The time in milliseconds for the transition.","\t */","\tOwl.prototype.next = function(speed) {","\t\tspeed = speed || false;","\t\tthis.to(this.relative(this.current()) + 1, speed);","\t};","","\t/**","\t * Slides to the previous item.","\t * @public","\t * @param {Number} [speed] - The time in milliseconds for the transition.","\t */","\tOwl.prototype.prev = function(speed) {","\t\tspeed = speed || false;","\t\tthis.to(this.relative(this.current()) - 1, speed);","\t};","","\t/**","\t * Handles the end of an animation.","\t * @protected","\t * @param {Event} event - The event arguments.","\t */","\tOwl.prototype.transitionEnd = function(event) {","","\t\t// if css2 animation then event object is undefined","\t\tif (event !== undefined) {","\t\t\tevent.stopPropagation();","","\t\t\t// Catch only owl-stage transitionEnd event","\t\t\tif ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {","\t\t\t\treturn false;","\t\t\t}","\t\t}","","\t\tthis.state.inMotion = false;","\t\tthis.trigger('translated');","\t};","","\t/**","\t * Gets viewport width.","\t * @protected","\t * @return {Number} - The width in pixel.","\t */","\tOwl.prototype.viewport = function() {","\t\tvar width;","\t\tif (this.options.responsiveBaseElement !== window) {","\t\t\twidth = $(this.options.responsiveBaseElement).width();","\t\t} else if (window.innerWidth) {","\t\t\twidth = window.innerWidth;","\t\t} else if (document.documentElement && document.documentElement.clientWidth) {","\t\t\twidth = document.documentElement.clientWidth;","\t\t} else {","\t\t\tthrow 'Can not detect viewport width.';","\t\t}","\t\treturn width;","\t};","","\t/**","\t * Replaces the current content.","\t * @public","\t * @param {HTMLElement|jQuery|String} content - The new content.","\t */","\tOwl.prototype.replace = function(content) {","\t\tthis.$stage.empty();","\t\tthis._items = [];","","\t\tif (content) {","\t\t\tcontent = (content instanceof jQuery) ? content : $(content);","\t\t}","","\t\tif (this.settings.nestedItemSelector) {","\t\t\tcontent = content.find('.' + this.settings.nestedItemSelector);","\t\t}","","\t\tcontent.filter(function() {","\t\t\treturn this.nodeType === 1;","\t\t}).each($.proxy(function(index, item) {","\t\t\titem = this.prepare(item);","\t\t\tthis.$stage.append(item);","\t\t\tthis._items.push(item);","\t\t\tthis._mergers.push(item.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);","\t\t}, this));","","\t\tthis.reset($.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);","","\t\tthis.invalidate('items');","\t};","","\t/**","\t * Adds an item.","\t * @todo Use `item` instead of `content` for the event arguments.","\t * @public","\t * @param {HTMLElement|jQuery|String} content - The item content to add.","\t * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.","\t */","\tOwl.prototype.add = function(content, position) {","\t\tposition = position === undefined ? this._items.length : this.normalize(position, true);","","\t\tthis.trigger('add', { content: content, position: position });","","\t\tif (this._items.length === 0 || position === this._items.length) {","\t\t\tthis.$stage.append(content);","\t\t\tthis._items.push(content);","\t\t\tthis._mergers.push(content.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);","\t\t} else {","\t\t\tthis._items[position].before(content);","\t\t\tthis._items.splice(position, 0, content);","\t\t\tthis._mergers.splice(position, 0, content.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);","\t\t}","","\t\tthis.invalidate('items');","","\t\tthis.trigger('added', { content: content, position: position });","\t};","","\t/**","\t * Removes an item by its position.","\t * @todo Use `item` instead of `content` for the event arguments.","\t * @public","\t * @param {Number} position - The relative position of the item to remove.","\t */","\tOwl.prototype.remove = function(position) {","\t\tposition = this.normalize(position, true);","","\t\tif (position === undefined) {","\t\t\treturn;","\t\t}","","\t\tthis.trigger('remove', { content: this._items[position], position: position });","","\t\tthis._items[position].remove();","\t\tthis._items.splice(position, 1);","\t\tthis._mergers.splice(position, 1);","","\t\tthis.invalidate('items');","","\t\tthis.trigger('removed', { content: null, position: position });","\t};","","\t/**","\t * Adds triggerable events.","\t * @protected","\t */","\tOwl.prototype.addTriggerableEvents = function() {","\t\tvar handler = $.proxy(function(callback, event) {","\t\t\treturn $.proxy(function(e) {","\t\t\t\tif (e.relatedTarget !== this) {","\t\t\t\t\tthis.suppress([ event ]);","\t\t\t\t\tcallback.apply(this, [].slice.call(arguments, 1));","\t\t\t\t\tthis.release([ event ]);","\t\t\t\t}","\t\t\t}, this);","\t\t}, this);","","\t\t$.each({","\t\t\t'next': this.next,","\t\t\t'prev': this.prev,","\t\t\t'to': this.to,","\t\t\t'destroy': this.destroy,","\t\t\t'refresh': this.refresh,","\t\t\t'replace': this.replace,","\t\t\t'add': this.add,","\t\t\t'remove': this.remove","\t\t}, $.proxy(function(event, callback) {","\t\t\tthis.$element.on(event + '.owl.carousel', handler(callback, event + '.owl.carousel'));","\t\t}, this));","","\t};","","\t/**","\t * Watches the visibility of the carousel element.","\t * @protected","\t */","\tOwl.prototype.watchVisibility = function() {","","\t\t// test on zepto","\t\tif (!isElVisible(this.$element.get(0))) {","\t\t\tthis.$element.addClass('owl-hidden');","\t\t\twindow.clearInterval(this.e._checkVisibile);","\t\t\tthis.e._checkVisibile = window.setInterval($.proxy(checkVisible, this), 500);","\t\t}","","\t\tfunction isElVisible(el) {","\t\t\treturn el.offsetWidth > 0 && el.offsetHeight > 0;","\t\t}","","\t\tfunction checkVisible() {","\t\t\tif (isElVisible(this.$element.get(0))) {","\t\t\t\tthis.$element.removeClass('owl-hidden');","\t\t\t\tthis.refresh();","\t\t\t\twindow.clearInterval(this.e._checkVisibile);","\t\t\t}","\t\t}","\t};","","\t/**","\t * Preloads images with auto width.","\t * @protected","\t * @todo Still to test","\t */","\tOwl.prototype.preloadAutoWidthImages = function(imgs) {","\t\tvar loaded, that, $el, img;","","\t\tloaded = 0;","\t\tthat = this;","\t\timgs.each(function(i, el) {","\t\t\t$el = $(el);","\t\t\timg = new Image();","","\t\t\timg.onload = function() {","\t\t\t\tloaded++;","\t\t\t\t$el.attr('src', img.src);","\t\t\t\t$el.css('opacity', 1);","\t\t\t\tif (loaded >= imgs.length) {","\t\t\t\t\tthat.state.imagesLoaded = true;","\t\t\t\t\tthat.initialize();","\t\t\t\t}","\t\t\t};","","\t\t\timg.src = $el.attr('src') || $el.attr('data-src') || $el.attr('data-src-retina');","\t\t});","\t};","","\t/**","\t * Destroys the carousel.","\t * @public","\t */","\tOwl.prototype.destroy = function() {","","\t\tif (this.$element.hasClass(this.settings.themeClass)) {","\t\t\tthis.$element.removeClass(this.settings.themeClass);","\t\t}","","\t\tif (this.settings.responsive !== false) {","\t\t\t$(window).off('resize.owl.carousel');","\t\t}","","\t\tif (this.transitionEndVendor) {","\t\t\tthis.off(this.$stage.get(0), this.transitionEndVendor, this.e._transitionEnd);","\t\t}","","\t\tfor ( var i in this._plugins) {","\t\t\tthis._plugins[i].destroy();","\t\t}","","\t\tif (this.settings.mouseDrag || this.settings.touchDrag) {","\t\t\tthis.$stage.off('mousedown touchstart touchcancel');","\t\t\t$(document).off('.owl.dragEvents');","\t\t\tthis.$stage.get(0).onselectstart = function() {};","\t\t\tthis.$stage.off('dragstart', function() { return false });","\t\t}","","\t\t// remove event handlers in the \".owl.carousel\" namespace","\t\tthis.$element.off('.owl');","","\t\tthis.$stage.children('.cloned').remove();","\t\tthis.e = null;","\t\tthis.$element.removeData('owlCarousel');","","\t\tthis.$stage.children().contents().unwrap();","\t\tthis.$stage.children().unwrap();","\t\tthis.$stage.unwrap();","\t};","","\t/**","\t * Operators to calculate right-to-left and left-to-right.","\t * @protected","\t * @param {Number} [a] - The left side operand.","\t * @param {String} [o] - The operator.","\t * @param {Number} [b] - The right side operand.","\t */","\tOwl.prototype.op = function(a, o, b) {","\t\tvar rtl = this.settings.rtl;","\t\tswitch (o) {","\t\t\tcase '<':","\t\t\t\treturn rtl ? a > b : a < b;","\t\t\tcase '>':","\t\t\t\treturn rtl ? a < b : a > b;","\t\t\tcase '>=':","\t\t\t\treturn rtl ? a <= b : a >= b;","\t\t\tcase '<=':","\t\t\t\treturn rtl ? a >= b : a <= b;","\t\t\tdefault:","\t\t\t\tbreak;","\t\t}","\t};","","\t/**","\t * Attaches to an internal event.","\t * @protected","\t * @param {HTMLElement} element - The event source.","\t * @param {String} event - The event name.","\t * @param {Function} listener - The event handler to attach.","\t * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.","\t */","\tOwl.prototype.on = function(element, event, listener, capture) {","\t\tif (element.addEventListener) {","\t\t\telement.addEventListener(event, listener, capture);","\t\t} else if (element.attachEvent) {","\t\t\telement.attachEvent('on' + event, listener);","\t\t}","\t};","","\t/**","\t * Detaches from an internal event.","\t * @protected","\t * @param {HTMLElement} element - The event source.","\t * @param {String} event - The event name.","\t * @param {Function} listener - The attached event handler to detach.","\t * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.","\t */","\tOwl.prototype.off = function(element, event, listener, capture) {","\t\tif (element.removeEventListener) {","\t\t\telement.removeEventListener(event, listener, capture);","\t\t} else if (element.detachEvent) {","\t\t\telement.detachEvent('on' + event, listener);","\t\t}","\t};","","\t/**","\t * Triggers an public event.","\t * @protected","\t * @param {String} name - The event name.","\t * @param {*} [data=null] - The event data.","\t * @param {String} [namespace=.owl.carousel] - The event namespace.","\t * @returns {Event} - The event arguments.","\t */","\tOwl.prototype.trigger = function(name, data, namespace) {","\t\tvar status = {","\t\t\titem: { count: this._items.length, index: this.current() }","\t\t}, handler = $.camelCase(","\t\t\t$.grep([ 'on', name, namespace ], function(v) { return v })","\t\t\t\t.join('-').toLowerCase()","\t\t), event = $.Event(","\t\t\t[ name, 'owl', namespace || 'carousel' ].join('.').toLowerCase(),","\t\t\t$.extend({ relatedTarget: this }, status, data)","\t\t);","","\t\tif (!this._supress[name]) {","\t\t\t$.each(this._plugins, function(name, plugin) {","\t\t\t\tif (plugin.onTrigger) {","\t\t\t\t\tplugin.onTrigger(event);","\t\t\t\t}","\t\t\t});","","\t\t\tthis.$element.trigger(event);","","\t\t\tif (this.settings && typeof this.settings[handler] === 'function') {","\t\t\t\tthis.settings[handler].apply(this, event);","\t\t\t}","\t\t}","","\t\treturn event;","\t};","","\t/**","\t * Suppresses events.","\t * @protected","\t * @param {Array.<String>} events - The events to suppress.","\t */","\tOwl.prototype.suppress = function(events) {","\t\t$.each(events, $.proxy(function(index, event) {","\t\t\tthis._supress[event] = true;","\t\t}, this));","\t}","","\t/**","\t * Releases suppressed events.","\t * @protected","\t * @param {Array.<String>} events - The events to release.","\t */","\tOwl.prototype.release = function(events) {","\t\t$.each(events, $.proxy(function(index, event) {","\t\t\tdelete this._supress[event];","\t\t}, this));","\t}","","\t/**","\t * Checks the availability of some browser features.","\t * @protected","\t */","\tOwl.prototype.browserSupport = function() {","\t\tthis.support3d = isPerspective();","","\t\tif (this.support3d) {","\t\t\tthis.transformVendor = isTransform();","","\t\t\t// take transitionend event name by detecting transition","\t\t\tvar endVendors = [ 'transitionend', 'webkitTransitionEnd', 'transitionend', 'oTransitionEnd' ];","\t\t\tthis.transitionEndVendor = endVendors[isTransition()];","","\t\t\t// take vendor name from transform name","\t\t\tthis.vendorName = this.transformVendor.replace(/Transform/i, '');","\t\t\tthis.vendorName = this.vendorName !== '' ? '-' + this.vendorName.toLowerCase() + '-' : '';","\t\t}","","\t\tthis.state.orientation = window.orientation;","\t};","","\t/**","\t * Get touch/drag coordinats.","\t * @private","\t * @param {event} - mousedown/touchstart event","\t * @returns {object} - Contains X and Y of current mouse/touch position","\t */","","\tfunction getTouches(event) {","\t\tif (event.touches !== undefined) {","\t\t\treturn {","\t\t\t\tx: event.touches[0].pageX,","\t\t\t\ty: event.touches[0].pageY","\t\t\t};","\t\t}","","\t\tif (event.touches === undefined) {","\t\t\tif (event.pageX !== undefined) {","\t\t\t\treturn {","\t\t\t\t\tx: event.pageX,","\t\t\t\t\ty: event.pageY","\t\t\t\t};","\t\t\t}","","\t\tif (event.pageX === undefined) {","\t\t\treturn {","\t\t\t\t\tx: event.clientX,","\t\t\t\t\ty: event.clientY","\t\t\t\t};","\t\t\t}","\t\t}","\t}","","\t/**","\t * Checks for CSS support.","\t * @private","\t * @param {Array} array - The CSS properties to check for.","\t * @returns {Array} - Contains the supported CSS property name and its index or `false`.","\t */","\tfunction isStyleSupported(array) {","\t\tvar p, s, fake = document.createElement('div'), list = array;","\t\tfor (p in list) {","\t\t\ts = list[p];","\t\t\tif (typeof fake.style[s] !== 'undefined') {","\t\t\t\tfake = null;","\t\t\t\treturn [ s, p ];","\t\t\t}","\t\t}","\t\treturn [ false ];","\t}","","\t/**","\t * Checks for CSS transition support.","\t * @private","\t * @todo Realy bad design","\t * @returns {Number}","\t */","\tfunction isTransition() {","\t\treturn isStyleSupported([ 'transition', 'WebkitTransition', 'MozTransition', 'OTransition' ])[1];","\t}","","\t/**","\t * Checks for CSS transform support.","\t * @private","\t * @returns {String} The supported property name or false.","\t */","\tfunction isTransform() {","\t\treturn isStyleSupported([ 'transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform' ])[0];","\t}","","\t/**","\t * Checks for CSS perspective support.","\t * @private","\t * @returns {String} The supported property name or false.","\t */","\tfunction isPerspective() {","\t\treturn isStyleSupported([ 'perspective', 'webkitPerspective', 'MozPerspective', 'OPerspective', 'MsPerspective' ])[0];","\t}","","\t/**","\t * Checks wether touch is supported or not.","\t * @private","\t * @returns {Boolean}","\t */","\tfunction isTouchSupport() {","\t\treturn 'ontouchstart' in window || !!(navigator.msMaxTouchPoints);","\t}","","\t/**","\t * Checks wether touch is supported or not for IE.","\t * @private","\t * @returns {Boolean}","\t */","\tfunction isTouchSupportIE() {","\t\treturn window.navigator.msPointerEnabled;","\t}","","\t/**","\t * The jQuery Plugin for the Owl Carousel","\t * @public","\t */","\t$.fn.owlCarousel = function(options) {","\t\treturn this.each(function() {","\t\t\tif (!$(this).data('owlCarousel')) {","\t\t\t\t$(this).data('owlCarousel', new Owl(this, options));","\t\t\t}","\t\t});","\t};","","\t/**","\t * The constructor for the jQuery Plugin","\t * @public","\t */","\t$.fn.owlCarousel.Constructor = Owl;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Lazy Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the lazy plugin.","\t * @class The Lazy Plugin","\t * @param {Owl} carousel - The Owl Carousel","\t */","\tvar Lazy = function(carousel) {","","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * Already loaded items.","\t\t * @protected","\t\t * @type {Array.<jQuery>}","\t\t */","\t\tthis._loaded = [];","","\t\t/**","\t\t * Event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'initialized.owl.carousel change.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (!e.namespace) {","\t\t\t\t\treturn;","\t\t\t\t}","","\t\t\t\tif (!this._core.settings || !this._core.settings.lazyLoad) {","\t\t\t\t\treturn;","\t\t\t\t}","","\t\t\t\tif ((e.property && e.property.name == 'position') || e.type == 'initialized') {","\t\t\t\t\tvar settings = this._core.settings,","\t\t\t\t\t\tn = (settings.center && Math.ceil(settings.items / 2) || settings.items),","\t\t\t\t\t\ti = ((settings.center && n * -1) || 0),","\t\t\t\t\t\tposition = ((e.property && e.property.value) || this._core.current()) + i,","\t\t\t\t\t\tclones = this._core.clones().length,","\t\t\t\t\t\tload = $.proxy(function(i, v) { this.load(v) }, this);","","\t\t\t\t\twhile (i++ < n) {","\t\t\t\t\t\tthis.load(clones / 2 + this._core.relative(position));","\t\t\t\t\t\tclones && $.each(this._core.clones(this._core.relative(position++)), load);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\t// set the default options","\t\tthis._core.options = $.extend({}, Lazy.Defaults, this._core.options);","","\t\t// register event handler","\t\tthis._core.$element.on(this._handlers);","\t}","","\t/**","\t * Default options.","\t * @public","\t */","\tLazy.Defaults = {","\t\tlazyLoad: false","\t}","","\t/**","\t * Loads all resources of an item at the specified position.","\t * @param {Number} position - The absolute position of the item.","\t * @protected","\t */","\tLazy.prototype.load = function(position) {","\t\tvar $item = this._core.$stage.children().eq(position),","\t\t\t$elements = $item && $item.find('.owl-lazy');","","\t\tif (!$elements || $.inArray($item.get(0), this._loaded) > -1) {","\t\t\treturn;","\t\t}","","\t\t$elements.each($.proxy(function(index, element) {","\t\t\tvar $element = $(element), image,","\t\t\t\turl = (window.devicePixelRatio > 1 && $element.attr('data-src-retina')) || $element.attr('data-src');","","\t\t\tthis._core.trigger('load', { element: $element, url: url }, 'lazy');","","\t\t\tif ($element.is('img')) {","\t\t\t\t$element.one('load.owl.lazy', $.proxy(function() {","\t\t\t\t\t$element.css('opacity', 1);","\t\t\t\t\tthis._core.trigger('loaded', { element: $element, url: url }, 'lazy');","\t\t\t\t}, this)).attr('src', url);","\t\t\t} else {","\t\t\t\timage = new Image();","\t\t\t\timage.onload = $.proxy(function() {","\t\t\t\t\t$element.css({","\t\t\t\t\t\t'background-image': 'url(' + url + ')',","\t\t\t\t\t\t'opacity': '1'","\t\t\t\t\t});","\t\t\t\t\tthis._core.trigger('loaded', { element: $element, url: url }, 'lazy');","\t\t\t\t}, this);","\t\t\t\timage.src = url;","\t\t\t}","\t\t}, this));","","\t\tthis._loaded.push($item.get(0));","\t}","","\t/**","\t * Destroys the plugin.","\t * @public","\t */","\tLazy.prototype.destroy = function() {","\t\tvar handler, property;","","\t\tfor (handler in this.handlers) {","\t\t\tthis._core.$element.off(handler, this.handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t}","","\t$.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * AutoHeight Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the auto height plugin.","\t * @class The Auto Height Plugin","\t * @param {Owl} carousel - The Owl Carousel","\t */","\tvar AutoHeight = function(carousel) {","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * All event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'initialized.owl.carousel': $.proxy(function() {","\t\t\t\tif (this._core.settings.autoHeight) {","\t\t\t\t\tthis.update();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'changed.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.autoHeight && e.property.name == 'position'){","\t\t\t\t\tthis.update();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'loaded.owl.lazy': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass)","\t\t\t\t\t=== this._core.$stage.children().eq(this._core.current())) {","\t\t\t\t\tthis.update();","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\t// set default options","\t\tthis._core.options = $.extend({}, AutoHeight.Defaults, this._core.options);","","\t\t// register event handlers","\t\tthis._core.$element.on(this._handlers);","\t};","","\t/**","\t * Default options.","\t * @public","\t */","\tAutoHeight.Defaults = {","\t\tautoHeight: false,","\t\tautoHeightClass: 'owl-height'","\t};","","\t/**","\t * Updates the view.","\t */","\tAutoHeight.prototype.update = function() {","\t\tthis._core.$stage.parent()","\t\t\t.height(this._core.$stage.children().eq(this._core.current()).height())","\t\t\t.addClass(this._core.settings.autoHeightClass);","\t};","","\tAutoHeight.prototype.destroy = function() {","\t\tvar handler, property;","","\t\tfor (handler in this._handlers) {","\t\t\tthis._core.$element.off(handler, this._handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t};","","\t$.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Video Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the video plugin.","\t * @class The Video Plugin","\t * @param {Owl} carousel - The Owl Carousel","\t */","\tvar Video = function(carousel) {","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * Cache all video URLs.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._videos = {};","","\t\t/**","\t\t * Current playing item.","\t\t * @protected","\t\t * @type {jQuery}","\t\t */","\t\tthis._playing = null;","","\t\t/**","\t\t * Whether this is in fullscreen or not.","\t\t * @protected","\t\t * @type {Boolean}","\t\t */","\t\tthis._fullscreen = false;","","\t\t/**","\t\t * All event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'resize.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.video && !this.isInFullScreen()) {","\t\t\t\t\te.preventDefault();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'refresh.owl.carousel changed.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._playing) {","\t\t\t\t\tthis.stop();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'prepared.owl.carousel': $.proxy(function(e) {","\t\t\t\tvar $element = $(e.content).find('.owl-video');","\t\t\t\tif ($element.length) {","\t\t\t\t\t$element.css('display', 'none');","\t\t\t\t\tthis.fetch($element, $(e.content));","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\t// set default options","\t\tthis._core.options = $.extend({}, Video.Defaults, this._core.options);","","\t\t// register event handlers","\t\tthis._core.$element.on(this._handlers);","","\t\tthis._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function(e) {","\t\t\tthis.play(e);","\t\t}, this));","\t};","","\t/**","\t * Default options.","\t * @public","\t */","\tVideo.Defaults = {","\t\tvideo: false,","\t\tvideoHeight: false,","\t\tvideoWidth: false","\t};","","\t/**","\t * Gets the video ID and the type (YouTube/Vimeo only).","\t * @protected","\t * @param {jQuery} target - The target containing the video data.","\t * @param {jQuery} item - The item containing the video.","\t */","\tVideo.prototype.fetch = function(target, item) {","","\t\tvar type = target.attr('data-vimeo-id') ? 'vimeo' : 'youtube',","\t\t\tid = target.attr('data-vimeo-id') || target.attr('data-youtube-id'),","\t\t\twidth = target.attr('data-width') || this._core.settings.videoWidth,","\t\t\theight = target.attr('data-height') || this._core.settings.videoHeight,","\t\t\turl = target.attr('href');","","\t\tif (url) {","\t\t\tid = url.match(/(http:|https:|)\\/\\/(player.|www.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com))\\/(video\\/|embed\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/);","","\t\t\tif (id[3].indexOf('youtu') > -1) {","\t\t\t\ttype = 'youtube';","\t\t\t} else if (id[3].indexOf('vimeo') > -1) {","\t\t\t\ttype = 'vimeo';","\t\t\t} else {","\t\t\t\tthrow new Error('Video URL not supported.');","\t\t\t}","\t\t\tid = id[6];","\t\t} else {","\t\t\tthrow new Error('Missing video URL.');","\t\t}","","\t\tthis._videos[url] = {","\t\t\ttype: type,","\t\t\tid: id,","\t\t\twidth: width,","\t\t\theight: height","\t\t};","","\t\titem.attr('data-video', url);","","\t\tthis.thumbnail(target, this._videos[url]);","\t};","","\t/**","\t * Creates video thumbnail.","\t * @protected","\t * @param {jQuery} target - The target containing the video data.","\t * @param {Object} info - The video info object.","\t * @see `fetch`","\t */","\tVideo.prototype.thumbnail = function(target, video) {","","\t\tvar tnLink,","\t\t\ticon,","\t\t\tpath,","\t\t\tdimensions = video.width && video.height ? 'style=\"width:' + video.width + 'px;height:' + video.height + 'px;\"' : '',","\t\t\tcustomTn = target.find('img'),","\t\t\tsrcType = 'src',","\t\t\tlazyClass = '',","\t\t\tsettings = this._core.settings,","\t\t\tcreate = function(path) {","\t\t\t\ticon = '<div class=\"owl-video-play-icon\"></div>';","","\t\t\t\tif (settings.lazyLoad) {","\t\t\t\t\ttnLink = '<div class=\"owl-video-tn ' + lazyClass + '\" ' + srcType + '=\"' + path + '\"></div>';","\t\t\t\t} else {","\t\t\t\t\ttnLink = '<div class=\"owl-video-tn\" style=\"opacity:1;background-image:url(' + path + ')\"></div>';","\t\t\t\t}","\t\t\t\ttarget.after(tnLink);","\t\t\t\ttarget.after(icon);","\t\t\t};","","\t\t// wrap video content into owl-video-wrapper div","\t\ttarget.wrap('<div class=\"owl-video-wrapper\"' + dimensions + '></div>');","","\t\tif (this._core.settings.lazyLoad) {","\t\t\tsrcType = 'data-src';","\t\t\tlazyClass = 'owl-lazy';","\t\t}","","\t\t// custom thumbnail","\t\tif (customTn.length) {","\t\t\tcreate(customTn.attr(srcType));","\t\t\tcustomTn.remove();","\t\t\treturn false;","\t\t}","","\t\tif (video.type === 'youtube') {","\t\t\tpath = \"http://img.youtube.com/vi/\" + video.id + \"/hqdefault.jpg\";","\t\t\tcreate(path);","\t\t} else if (video.type === 'vimeo') {","\t\t\t$.ajax({","\t\t\t\ttype: 'GET',","\t\t\t\turl: 'http://vimeo.com/api/v2/video/' + video.id + '.json',","\t\t\t\tjsonp: 'callback',","\t\t\t\tdataType: 'jsonp',","\t\t\t\tsuccess: function(data) {","\t\t\t\t\tpath = data[0].thumbnail_large;","\t\t\t\t\tcreate(path);","\t\t\t\t}","\t\t\t});","\t\t}","\t};","","\t/**","\t * Stops the current video.","\t * @public","\t */","\tVideo.prototype.stop = function() {","\t\tthis._core.trigger('stop', null, 'video');","\t\tthis._playing.find('.owl-video-frame').remove();","\t\tthis._playing.removeClass('owl-video-playing');","\t\tthis._playing = null;","\t};","","\t/**","\t * Starts the current video.","\t * @public","\t * @param {Event} ev - The event arguments.","\t */","\tVideo.prototype.play = function(ev) {","\t\tthis._core.trigger('play', null, 'video');","","\t\tif (this._playing) {","\t\t\tthis.stop();","\t\t}","","\t\tvar target = $(ev.target || ev.srcElement),","\t\t\titem = target.closest('.' + this._core.settings.itemClass),","\t\t\tvideo = this._videos[item.attr('data-video')],","\t\t\twidth = video.width || '100%',","\t\t\theight = video.height || this._core.$stage.height(),","\t\t\thtml, wrap;","","\t\tif (video.type === 'youtube') {","\t\t\thtml = '<iframe width=\"' + width + '\" height=\"' + height + '\" src=\"http://www.youtube.com/embed/'","\t\t\t\t+ video.id + '?autoplay=1&v=' + video.id + '\" frameborder=\"0\" allowfullscreen></iframe>';","\t\t} else if (video.type === 'vimeo') {","\t\t\thtml = '<iframe src=\"http://player.vimeo.com/video/' + video.id + '?autoplay=1\" width=\"' + width","\t\t\t\t+ '\" height=\"' + height","\t\t\t\t+ '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';","\t\t}","","\t\titem.addClass('owl-video-playing');","\t\tthis._playing = item;","","\t\twrap = $('<div style=\"height:' + height + 'px; width:' + width + 'px\" class=\"owl-video-frame\">'","\t\t\t+ html + '</div>');","\t\ttarget.after(wrap);","\t};","","\t/**","\t * Checks whether an video is currently in full screen mode or not.","\t * @todo Bad style because looks like a readonly method but changes members.","\t * @protected","\t * @returns {Boolean}","\t */","\tVideo.prototype.isInFullScreen = function() {","","\t\t// if Vimeo Fullscreen mode","\t\tvar element = document.fullscreenElement || document.mozFullScreenElement","\t\t\t|| document.webkitFullscreenElement;","","\t\tif (element && $(element).parent().hasClass('owl-video-frame')) {","\t\t\tthis._core.speed(0);","\t\t\tthis._fullscreen = true;","\t\t}","","\t\tif (element && this._fullscreen && this._playing) {","\t\t\treturn false;","\t\t}","","\t\t// comming back from fullscreen","\t\tif (this._fullscreen) {","\t\t\tthis._fullscreen = false;","\t\t\treturn false;","\t\t}","","\t\t// check full screen mode and window orientation","\t\tif (this._playing) {","\t\t\tif (this._core.state.orientation !== window.orientation) {","\t\t\t\tthis._core.state.orientation = window.orientation;","\t\t\t\treturn false;","\t\t\t}","\t\t}","","\t\treturn true;","\t};","","\t/**","\t * Destroys the plugin.","\t */","\tVideo.prototype.destroy = function() {","\t\tvar handler, property;","","\t\tthis._core.$element.off('click.owl.video');","","\t\tfor (handler in this._handlers) {","\t\t\tthis._core.$element.off(handler, this._handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t};","","\t$.fn.owlCarousel.Constructor.Plugins.Video = Video;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Animate Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the animate plugin.","\t * @class The Navigation Plugin","\t * @param {Owl} scope - The Owl Carousel","\t */","\tvar Animate = function(scope) {","\t\tthis.core = scope;","\t\tthis.core.options = $.extend({}, Animate.Defaults, this.core.options);","\t\tthis.swapping = true;","\t\tthis.previous = undefined;","\t\tthis.next = undefined;","","\t\tthis.handlers = {","\t\t\t'change.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (e.property.name == 'position') {","\t\t\t\t\tthis.previous = this.core.current();","\t\t\t\t\tthis.next = e.property.value;","\t\t\t\t}","\t\t\t}, this),","\t\t\t'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function(e) {","\t\t\t\tthis.swapping = e.type == 'translated';","\t\t\t}, this),","\t\t\t'translate.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {","\t\t\t\t\tthis.swap();","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\tthis.core.$element.on(this.handlers);","\t};","","\t/**","\t * Default options.","\t * @public","\t */","\tAnimate.Defaults = {","\t\tanimateOut: false,","\t\tanimateIn: false","\t};","","\t/**","\t * Toggles the animation classes whenever an translations starts.","\t * @protected","\t * @returns {Boolean|undefined}","\t */","\tAnimate.prototype.swap = function() {","","\t\tif (this.core.settings.items !== 1 || !this.core.support3d) {","\t\t\treturn;","\t\t}","","\t\tthis.core.speed(0);","","\t\tvar left,","\t\t\tclear = $.proxy(this.clear, this),","\t\t\tprevious = this.core.$stage.children().eq(this.previous),","\t\t\tnext = this.core.$stage.children().eq(this.next),","\t\t\tincoming = this.core.settings.animateIn,","\t\t\toutgoing = this.core.settings.animateOut;","","\t\tif (this.core.current() === this.previous) {","\t\t\treturn;","\t\t}","","\t\tif (outgoing) {","\t\t\tleft = this.core.coordinates(this.previous) - this.core.coordinates(this.next);","\t\t\tprevious.css( { 'left': left + 'px' } )","\t\t\t\t.addClass('animated owl-animated-out')","\t\t\t\t.addClass(outgoing)","\t\t\t\t.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', clear);","\t\t}","","\t\tif (incoming) {","\t\t\tnext.addClass('animated owl-animated-in')","\t\t\t\t.addClass(incoming)","\t\t\t\t.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', clear);","\t\t}","\t};","","\tAnimate.prototype.clear = function(e) {","\t\t$(e.target).css( { 'left': '' } )","\t\t\t.removeClass('animated owl-animated-out owl-animated-in')","\t\t\t.removeClass(this.core.settings.animateIn)","\t\t\t.removeClass(this.core.settings.animateOut);","\t\tthis.core.transitionEnd();","\t}","","\t/**","\t * Destroys the plugin.","\t * @public","\t */","\tAnimate.prototype.destroy = function() {","\t\tvar handler, property;","","\t\tfor (handler in this.handlers) {","\t\t\tthis.core.$element.off(handler, this.handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t};","","\t$.fn.owlCarousel.Constructor.Plugins.Animate = Animate;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Autoplay Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the autoplay plugin.","\t * @class The Autoplay Plugin","\t * @param {Owl} scope - The Owl Carousel","\t */","\tvar Autoplay = function(scope) {","\t\tthis.core = scope;","\t\tthis.core.options = $.extend({}, Autoplay.Defaults, this.core.options);","","\t\tthis.handlers = {","\t\t\t'translated.owl.carousel refreshed.owl.carousel': $.proxy(function() {","\t\t\t\tthis.autoplay();","\t\t\t}, this),","\t\t\t'play.owl.autoplay': $.proxy(function(e, t, s) {","\t\t\t\tthis.play(t, s);","\t\t\t}, this),","\t\t\t'stop.owl.autoplay': $.proxy(function() {","\t\t\t\tthis.stop();","\t\t\t}, this),","\t\t\t'mouseover.owl.autoplay': $.proxy(function() {","\t\t\t\tif (this.core.settings.autoplayHoverPause) {","\t\t\t\t\tthis.pause();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'mouseleave.owl.autoplay': $.proxy(function() {","\t\t\t\tif (this.core.settings.autoplayHoverPause) {","\t\t\t\t\tthis.autoplay();","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\tthis.core.$element.on(this.handlers);","\t};","","\t/**","\t * Default options.","\t * @public","\t */","\tAutoplay.Defaults = {","\t\tautoplay: false,","\t\tautoplayTimeout: 5000,","\t\tautoplayHoverPause: false,","\t\tautoplaySpeed: false","\t};","","\t/**","\t * @protected","\t * @todo Must be documented.","\t */","\tAutoplay.prototype.autoplay = function() {","\t\tif (this.core.settings.autoplay && !this.core.state.videoPlay) {","\t\t\twindow.clearInterval(this.interval);","","\t\t\tthis.interval = window.setInterval($.proxy(function() {","\t\t\t\tthis.play();","\t\t\t}, this), this.core.settings.autoplayTimeout);","\t\t} else {","\t\t\twindow.clearInterval(this.interval);","\t\t}","\t};","","\t/**","\t * Starts the autoplay.","\t * @public","\t * @param {Number} [timeout] - ...","\t * @param {Number} [speed] - ...","\t * @returns {Boolean|undefined} - ...","\t * @todo Must be documented.","\t */","\tAutoplay.prototype.play = function(timeout, speed) {","\t\t// if tab is inactive - doesnt work in <IE10","\t\tif (document.hidden === true) {","\t\t\treturn;","\t\t}","","\t\tif (this.core.state.isTouch || this.core.state.isScrolling","\t\t\t|| this.core.state.isSwiping || this.core.state.inMotion) {","\t\t\treturn;","\t\t}","","\t\tif (this.core.settings.autoplay === false) {","\t\t\twindow.clearInterval(this.interval);","\t\t\treturn;","\t\t}","","\t\tthis.core.next(this.core.settings.autoplaySpeed);","\t};","","\t/**","\t * Stops the autoplay.","\t * @public","\t */","\tAutoplay.prototype.stop = function() {","\t\twindow.clearInterval(this.interval);","\t};","","\t/**","\t * Pauses the autoplay.","\t * @public","\t */","\tAutoplay.prototype.pause = function() {","\t\twindow.clearInterval(this.interval);","\t};","","\t/**","\t * Destroys the plugin.","\t */","\tAutoplay.prototype.destroy = function() {","\t\tvar handler, property;","","\t\twindow.clearInterval(this.interval);","","\t\tfor (handler in this.handlers) {","\t\t\tthis.core.$element.off(handler, this.handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t};","","\t$.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Navigation Plugin"," * @version 2.0.0"," * @author Artus Kolanowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","\t'use strict';","","\t/**","\t * Creates the navigation plugin.","\t * @class The Navigation Plugin","\t * @param {Owl} carousel - The Owl Carousel.","\t */","\tvar Navigation = function(carousel) {","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * Indicates whether the plugin is initialized or not.","\t\t * @protected","\t\t * @type {Boolean}","\t\t */","\t\tthis._initialized = false;","","\t\t/**","\t\t * The current paging indexes.","\t\t * @protected","\t\t * @type {Array}","\t\t */","\t\tthis._pages = [];","","\t\t/**","\t\t * All DOM elements of the user interface.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._controls = {};","","\t\t/**","\t\t * Markup for an indicator.","\t\t * @protected","\t\t * @type {Array.<String>}","\t\t */","\t\tthis._templates = [];","","\t\t/**","\t\t * The carousel element.","\t\t * @type {jQuery}","\t\t */","\t\tthis.$element = this._core.$element;","","\t\t/**","\t\t * Overridden methods of the carousel.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._overrides = {","\t\t\tnext: this._core.next,","\t\t\tprev: this._core.prev,","\t\t\tto: this._core.to","\t\t};","","\t\t/**","\t\t * All event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'prepared.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.dotsData) {","\t\t\t\t\tthis._templates.push($(e.content).find('[data-dot]').andSelf('[data-dot]').attr('data-dot'));","\t\t\t\t}","\t\t\t}, this),","\t\t\t'add.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.dotsData) {","\t\t\t\t\tthis._templates.splice(e.position, 0, $(e.content).find('[data-dot]').andSelf('[data-dot]').attr('data-dot'));","\t\t\t\t}","\t\t\t}, this),","\t\t\t'remove.owl.carousel prepared.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.dotsData) {","\t\t\t\t\tthis._templates.splice(e.position, 1);","\t\t\t\t}","\t\t\t}, this),","\t\t\t'change.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (e.property.name == 'position') {","\t\t\t\t\tif (!this._core.state.revert && !this._core.settings.loop && this._core.settings.navRewind) {","\t\t\t\t\t\tvar current = this._core.current(),","\t\t\t\t\t\t\tmaximum = this._core.maximum(),","\t\t\t\t\t\t\tminimum = this._core.minimum();","\t\t\t\t\t\te.data = e.property.value > maximum","\t\t\t\t\t\t\t? current >= maximum ? minimum : maximum","\t\t\t\t\t\t\t: e.property.value < minimum ? maximum : e.property.value;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}, this),","\t\t\t'changed.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (e.property.name == 'position') {","\t\t\t\t\tthis.draw();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'refreshed.owl.carousel': $.proxy(function() {","\t\t\t\tif (!this._initialized) {","\t\t\t\t\tthis.initialize();","\t\t\t\t\tthis._initialized = true;","\t\t\t\t}","\t\t\t\tthis._core.trigger('refresh', null, 'navigation');","\t\t\t\tthis.update();","\t\t\t\tthis.draw();","\t\t\t\tthis._core.trigger('refreshed', null, 'navigation');","\t\t\t}, this)","\t\t};","","\t\t// set default options","\t\tthis._core.options = $.extend({}, Navigation.Defaults, this._core.options);","","\t\t// register event handlers","\t\tthis.$element.on(this._handlers);","\t}","","\t/**","\t * Default options.","\t * @public","\t * @todo Rename `slideBy` to `navBy`","\t */","\tNavigation.Defaults = {","\t\tnav: false,","\t\tnavRewind: true,","\t\tnavText: [ 'prev', 'next' ],","\t\tnavSpeed: false,","\t\tnavElement: 'div',","\t\tnavContainer: false,","\t\tnavContainerClass: 'owl-nav',","\t\tnavClass: [ 'owl-prev', 'owl-next' ],","\t\tslideBy: 1,","\t\tdotClass: 'owl-dot',","\t\tdotsClass: 'owl-dots',","\t\tdots: true,","\t\tdotsEach: false,","\t\tdotData: false,","\t\tdotsSpeed: false,","\t\tdotsContainer: false,","\t\tcontrolsClass: 'owl-controls'","\t}","","\t/**","\t * Initializes the layout of the plugin and extends the carousel.","\t * @protected","\t */","\tNavigation.prototype.initialize = function() {","\t\tvar $container, override,","\t\t\toptions = this._core.settings;","","\t\t// create the indicator template","\t\tif (!options.dotsData) {","\t\t\tthis._templates = [ $('<div>')","\t\t\t\t.addClass(options.dotClass)","\t\t\t\t.append($('<span>'))","\t\t\t\t.prop('outerHTML') ];","\t\t}","","\t\t// create controls container if needed","\t\tif (!options.navContainer || !options.dotsContainer) {","\t\t\tthis._controls.$container = $('<div>')","\t\t\t\t.addClass(options.controlsClass)","\t\t\t\t.appendTo(this.$element);","\t\t}","","\t\t// create DOM structure for absolute navigation","\t\tthis._controls.$indicators = options.dotsContainer ? $(options.dotsContainer)","\t\t\t: $('<div>').hide().addClass(options.dotsClass).appendTo(this._controls.$container);","","\t\tthis._controls.$indicators.on('click', 'div', $.proxy(function(e) {","\t\t\tvar index = $(e.target).parent().is(this._controls.$indicators)","\t\t\t\t? $(e.target).index() : $(e.target).parent().index();","","\t\t\te.preventDefault();","","\t\t\tthis.to(index, options.dotsSpeed);","\t\t}, this));","","\t\t// create DOM structure for relative navigation","\t\t$container = options.navContainer ? $(options.navContainer)","\t\t\t: $('<div>').addClass(options.navContainerClass).prependTo(this._controls.$container);","","\t\tthis._controls.$next = $('<' + options.navElement + '>');","\t\tthis._controls.$previous = this._controls.$next.clone();","","\t\tthis._controls.$previous","\t\t\t.addClass(options.navClass[0])","\t\t\t.html(options.navText[0])","\t\t\t.hide()","\t\t\t.prependTo($container)","\t\t\t.on('click', $.proxy(function(e) {","\t\t\t\tthis.prev(options.navSpeed);","\t\t\t}, this));","\t\tthis._controls.$next","\t\t\t.addClass(options.navClass[1])","\t\t\t.html(options.navText[1])","\t\t\t.hide()","\t\t\t.appendTo($container)","\t\t\t.on('click', $.proxy(function(e) {","\t\t\t\tthis.next(options.navSpeed);","\t\t\t}, this));","","\t\t// override public methods of the carousel","\t\tfor (override in this._overrides) {","\t\t\tthis._core[override] = $.proxy(this[override], this);","\t\t}","\t}","","\t/**","\t * Destroys the plugin.","\t * @protected","\t */","\tNavigation.prototype.destroy = function() {","\t\tvar handler, control, property, override;","","\t\tfor (handler in this._handlers) {","\t\t\tthis.$element.off(handler, this._handlers[handler]);","\t\t}","\t\tfor (control in this._controls) {","\t\t\tthis._controls[control].remove();","\t\t}","\t\tfor (override in this.overides) {","\t\t\tthis._core[override] = this._overrides[override];","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t}","","\t/**","\t * Updates the internal state.","\t * @protected","\t */","\tNavigation.prototype.update = function() {","\t\tvar i, j, k,","\t\t\toptions = this._core.settings,","\t\t\tlower = this._core.clones().length / 2,","\t\t\tupper = lower + this._core.items().length,","\t\t\tsize = options.center || options.autoWidth || options.dotData","\t\t\t\t? 1 : options.dotsEach || options.items;","","\t\tif (options.slideBy !== 'page') {","\t\t\toptions.slideBy = Math.min(options.slideBy, options.items);","\t\t}","","\t\tif (options.dots || options.slideBy == 'page') {","\t\t\tthis._pages = [];","","\t\t\tfor (i = lower, j = 0, k = 0; i < upper; i++) {","\t\t\t\tif (j >= size || j === 0) {","\t\t\t\t\tthis._pages.push({","\t\t\t\t\t\tstart: i - lower,","\t\t\t\t\t\tend: i - lower + size - 1","\t\t\t\t\t});","\t\t\t\t\tj = 0, ++k;","\t\t\t\t}","\t\t\t\tj += this._core.mergers(this._core.relative(i));","\t\t\t}","\t\t}","\t}","","\t/**","\t * Draws the user interface.","\t * @todo The option `dotData` wont work.","\t * @protected","\t */","\tNavigation.prototype.draw = function() {","\t\tvar difference, i, html = '',","\t\t\toptions = this._core.settings,","\t\t\t$items = this._core.$stage.children(),","\t\t\tindex = this._core.relative(this._core.current());","","\t\tif (options.nav && !options.loop && !options.navRewind) {","\t\t\tthis._controls.$previous.toggleClass('disabled', index <= 0);","\t\t\tthis._controls.$next.toggleClass('disabled', index >= this._core.maximum());","\t\t}","","\t\tthis._controls.$previous.toggle(options.nav);","\t\tthis._controls.$next.toggle(options.nav);","","\t\tif (options.dots) {","\t\t\tdifference = this._pages.length - this._controls.$indicators.children().length;","","\t\t\tif (options.dotData && difference !== 0) {","\t\t\t\tfor (i = 0; i < this._controls.$indicators.children().length; i++) {","\t\t\t\t\thtml += this._templates[this._core.relative(i)];","\t\t\t\t}","\t\t\t\tthis._controls.$indicators.html(html);","\t\t\t} else if (difference > 0) {","\t\t\t\thtml = new Array(difference + 1).join(this._templates[0]);","\t\t\t\tthis._controls.$indicators.append(html);","\t\t\t} else if (difference < 0) {","\t\t\t\tthis._controls.$indicators.children().slice(difference).remove();","\t\t\t}","","\t\t\tthis._controls.$indicators.find('.active').removeClass('active');","\t\t\tthis._controls.$indicators.children().eq($.inArray(this.current(), this._pages)).addClass('active');","\t\t}","","\t\tthis._controls.$indicators.toggle(options.dots);","\t}","","\t/**","\t * Extends event data.","\t * @protected","\t * @param {Event} event - The event object which gets thrown.","\t */","\tNavigation.prototype.onTrigger = function(event) {","\t\tvar settings = this._core.settings;","","\t\tevent.page = {","\t\t\tindex: $.inArray(this.current(), this._pages),","\t\t\tcount: this._pages.length,","\t\t\tsize: settings && (settings.center || settings.autoWidth || settings.dotData","\t\t\t\t? 1 : settings.dotsEach || settings.items)","\t\t};","\t}","","\t/**","\t * Gets the current page position of the carousel.","\t * @protected","\t * @returns {Number}","\t */","\tNavigation.prototype.current = function() {","\t\tvar index = this._core.relative(this._core.current());","\t\treturn $.grep(this._pages, function(o) {","\t\t\treturn o.start <= index && o.end >= index;","\t\t}).pop();","\t}","","\t/**","\t * Gets the current succesor/predecessor position.","\t * @protected","\t * @returns {Number}","\t */","\tNavigation.prototype.getPosition = function(successor) {","\t\tvar position, length,","\t\t\toptions = this._core.settings;","","\t\tif (options.slideBy == 'page') {","\t\t\tposition = $.inArray(this.current(), this._pages);","\t\t\tlength = this._pages.length;","\t\t\tsuccessor ? ++position : --position;","\t\t\tposition = this._pages[((position % length) + length) % length].start;","\t\t} else {","\t\t\tposition = this._core.relative(this._core.current());","\t\t\tlength = this._core.items().length;","\t\t\tsuccessor ? position += options.slideBy : position -= options.slideBy;","\t\t}","\t\treturn position;","\t}","","\t/**","\t * Slides to the next item or page.","\t * @public","\t * @param {Number} [speed=false] - The time in milliseconds for the transition.","\t */","\tNavigation.prototype.next = function(speed) {","\t\t$.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);","\t}","","\t/**","\t * Slides to the previous item or page.","\t * @public","\t * @param {Number} [speed=false] - The time in milliseconds for the transition.","\t */","\tNavigation.prototype.prev = function(speed) {","\t\t$.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);","\t}","","\t/**","\t * Slides to the specified item or page.","\t * @public","\t * @param {Number} position - The position of the item or page.","\t * @param {Number} [speed] - The time in milliseconds for the transition.","\t * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.","\t */","\tNavigation.prototype.to = function(position, speed, standard) {","\t\tvar length;","","\t\tif (!standard) {","\t\t\tlength = this._pages.length;","\t\t\t$.proxy(this._overrides.to, this._core)(this._pages[((position % length) + length) % length].start, speed);","\t\t} else {","\t\t\t$.proxy(this._overrides.to, this._core)(position, speed);","\t\t}","\t}","","\t$.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Hash Plugin"," * @version 2.0.0"," * @author Artus Kolanowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","\t'use strict';","","\t/**","\t * Creates the hash plugin.","\t * @class The Hash Plugin","\t * @param {Owl} carousel - The Owl Carousel","\t */","\tvar Hash = function(carousel) {","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * Hash table for the hashes.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._hashes = {};","","\t\t/**","\t\t * The carousel element.","\t\t * @type {jQuery}","\t\t */","\t\tthis.$element = this._core.$element;","","\t\t/**","\t\t * All event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'initialized.owl.carousel': $.proxy(function() {","\t\t\t\tif (this._core.settings.startPosition == 'URLHash') {","\t\t\t\t\t$(window).trigger('hashchange.owl.navigation');","\t\t\t\t}","\t\t\t}, this),","\t\t\t'prepared.owl.carousel': $.proxy(function(e) {","\t\t\t\tvar hash = $(e.content).find('[data-hash]').andSelf('[data-hash]').attr('data-hash');","\t\t\t\tthis._hashes[hash] = e.content;","\t\t\t}, this)","\t\t};","","\t\t// set default options","\t\tthis._core.options = $.extend({}, Hash.Defaults, this._core.options);","","\t\t// register the event handlers","\t\tthis.$element.on(this._handlers);","","\t\t// register event listener for hash navigation","\t\t$(window).on('hashchange.owl.navigation', $.proxy(function() {","\t\t\tvar hash = window.location.hash.substring(1),","\t\t\t\titems = this._core.$stage.children(),","\t\t\t\tposition = this._hashes[hash] && items.index(this._hashes[hash]) || 0;","","\t\t\tif (!hash) {","\t\t\t\treturn false;","\t\t\t}","","\t\t\tthis._core.to(position, false, true);","\t\t}, this));","\t}","","\t/**","\t * Default options.","\t * @public","\t */","\tHash.Defaults = {","\t\tURLhashListener: false","\t}","","\t/**","\t * Destroys the plugin.","\t * @public","\t */","\tHash.prototype.destroy = function() {","\t\tvar handler, property;","","\t\t$(window).off('hashchange.owl.navigation');","","\t\tfor (handler in this._handlers) {","\t\t\tthis._core.$element.off(handler, this._handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t}","","\t$.fn.owlCarousel.Constructor.Plugins.Hash = Hash;","","})(window.Zepto || window.jQuery, window, document);",""]},{"start":{"row":0,"column":0},"end":{"row":3069,"column":0},"action":"insert","lines":["/**"," * Owl carousel"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," * @todo Lazy Load Icon"," * @todo prevent animationend bubling"," * @todo itemsScaleUp"," * @todo Test Zepto"," * @todo stagePadding calculate wrong active classes"," */",";(function($, window, document, undefined) {","","\tvar drag, state, e;","","\t/**","\t * Template for status information about drag and touch events.","\t * @private","\t */","\tdrag = {","\t\tstart: 0,","\t\tstartX: 0,","\t\tstartY: 0,","\t\tcurrent: 0,","\t\tcurrentX: 0,","\t\tcurrentY: 0,","\t\toffsetX: 0,","\t\toffsetY: 0,","\t\tdistance: null,","\t\tstartTime: 0,","\t\tendTime: 0,","\t\tupdatedX: 0,","\t\ttargetEl: null","\t};","","\t/**","\t * Template for some status informations.","\t * @private","\t */","\tstate = {","\t\tisTouch: false,","\t\tisScrolling: false,","\t\tisSwiping: false,","\t\tdirection: false,","\t\tinMotion: false","\t};","","\t/**","\t * Event functions references.","\t * @private","\t */","\te = {","\t\t_onDragStart: null,","\t\t_onDragMove: null,","\t\t_onDragEnd: null,","\t\t_transitionEnd: null,","\t\t_resizer: null,","\t\t_responsiveCall: null,","\t\t_goToLoop: null,","\t\t_checkVisibile: null","\t};","","\t/**","\t * Creates a carousel.","\t * @class The Owl Carousel.","\t * @public","\t * @param {HTMLElement|jQuery} element - The element to create the carousel for.","\t * @param {Object} [options] - The options","\t */","\tfunction Owl(element, options) {","","\t\t/**","\t\t * Current settings for the carousel.","\t\t * @public","\t\t */","\t\tthis.settings = null;","","\t\t/**","\t\t * Current options set by the caller including defaults.","\t\t * @public","\t\t */","\t\tthis.options = $.extend({}, Owl.Defaults, options);","","\t\t/**","\t\t * Plugin element.","\t\t * @public","\t\t */","\t\tthis.$element = $(element);","","\t\t/**","\t\t * Caches informations about drag and touch events.","\t\t */","\t\tthis.drag = $.extend({}, drag);","","\t\t/**","\t\t * Caches some status informations.","\t\t * @protected","\t\t */","\t\tthis.state = $.extend({}, state);","","\t\t/**","\t\t * @protected","\t\t * @todo Must be documented","\t\t */","\t\tthis.e = $.extend({}, e);","","\t\t/**","\t\t * References to the running plugins of this carousel.","\t\t * @protected","\t\t */","\t\tthis._plugins = {};","","\t\t/**","\t\t * Currently suppressed events to prevent them from beeing retriggered.","\t\t * @protected","\t\t */","\t\tthis._supress = {};","","\t\t/**","\t\t * Absolute current position.","\t\t * @protected","\t\t */","\t\tthis._current = null;","","\t\t/**","\t\t * Animation speed in milliseconds.","\t\t * @protected","\t\t */","\t\tthis._speed = null;","","\t\t/**","\t\t * Coordinates of all items in pixel.","\t\t * @todo The name of this member is missleading.","\t\t * @protected","\t\t */","\t\tthis._coordinates = [];","","\t\t/**","\t\t * Current breakpoint.","\t\t * @todo Real media queries would be nice.","\t\t * @protected","\t\t */","\t\tthis._breakpoint = null;","","\t\t/**","\t\t * Current width of the plugin element.","\t\t */","\t\tthis._width = null;","","\t\t/**","\t\t * All real items.","\t\t * @protected","\t\t */","\t\tthis._items = [];","","\t\t/**","\t\t * All cloned items.","\t\t * @protected","\t\t */","\t\tthis._clones = [];","","\t\t/**","\t\t * Merge values of all items.","\t\t * @todo Maybe this could be part of a plugin.","\t\t * @protected","\t\t */","\t\tthis._mergers = [];","","\t\t/**","\t\t * Invalidated parts within the update process.","\t\t * @protected","\t\t */","\t\tthis._invalidated = {};","","\t\t/**","\t\t * Ordered list of workers for the update process.","\t\t * @protected","\t\t */","\t\tthis._pipe = [];","","\t\t$.each(Owl.Plugins, $.proxy(function(key, plugin) {","\t\t\tthis._plugins[key[0].toLowerCase() + key.slice(1)]","\t\t\t\t= new plugin(this);","\t\t}, this));","","\t\t$.each(Owl.Pipe, $.proxy(function(priority, worker) {","\t\t\tthis._pipe.push({","\t\t\t\t'filter': worker.filter,","\t\t\t\t'run': $.proxy(worker.run, this)","\t\t\t});","\t\t}, this));","","\t\tthis.setup();","\t\tthis.initialize();","\t}","","\t/**","\t * Default options for the carousel.","\t * @public","\t */","\tOwl.Defaults = {","\t\titems: 3,","\t\tloop: false,","\t\tcenter: false,","","\t\tmouseDrag: true,","\t\ttouchDrag: true,","\t\tpullDrag: true,","\t\tfreeDrag: false,","","\t\tmargin: 0,","\t\tstagePadding: 0,","","\t\tmerge: false,","\t\tmergeFit: true,","\t\tautoWidth: false,","","\t\tstartPosition: 0,","\t\trtl: false,","","\t\tsmartSpeed: 250,","\t\tfluidSpeed: false,","\t\tdragEndSpeed: false,","","\t\tresponsive: {},","\t\tresponsiveRefreshRate: 200,","\t\tresponsiveBaseElement: window,","\t\tresponsiveClass: false,","","\t\tfallbackEasing: 'swing',","","\t\tinfo: false,","","\t\tnestedItemSelector: false,","\t\titemElement: 'div',","\t\tstageElement: 'div',","","\t\t// Classes and Names","\t\tthemeClass: 'owl-theme',","\t\tbaseClass: 'owl-carousel',","\t\titemClass: 'owl-item',","\t\tcenterClass: 'center',","\t\tactiveClass: 'active'","\t};","","\t/**","\t * Enumeration for width.","\t * @public","\t * @readonly","\t * @enum {String}","\t */","\tOwl.Width = {","\t\tDefault: 'default',","\t\tInner: 'inner',","\t\tOuter: 'outer'","\t};","","\t/**","\t * Contains all registered plugins.","\t * @public","\t */","\tOwl.Plugins = {};","","\t/**","\t * Update pipe.","\t */","\tOwl.Pipe = [ {","\t\tfilter: [ 'width', 'items', 'settings' ],","\t\trun: function(cache) {","\t\t\tcache.current = this._items && this._items[this.relative(this._current)];","\t\t}","\t}, {","\t\tfilter: [ 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar cached = this._clones,","\t\t\t\tclones = this.$stage.children('.cloned');","","\t\t\tif (clones.length !== cached.length || (!this.settings.loop && cached.length > 0)) {","\t\t\t\tthis.$stage.children('.cloned').remove();","\t\t\t\tthis._clones = [];","\t\t\t}","\t\t}","\t}, {","\t\tfilter: [ 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar i, n,","\t\t\t\tclones = this._clones,","\t\t\t\titems = this._items,","\t\t\t\tdelta = this.settings.loop ? clones.length - Math.max(this.settings.items * 2, 4) : 0;","","\t\t\tfor (i = 0, n = Math.abs(delta / 2); i < n; i++) {","\t\t\t\tif (delta > 0) {","\t\t\t\t\tthis.$stage.children().eq(items.length + clones.length - 1).remove();","\t\t\t\t\tclones.pop();","\t\t\t\t\tthis.$stage.children().eq(0).remove();","\t\t\t\t\tclones.pop();","\t\t\t\t} else {","\t\t\t\t\tclones.push(clones.length / 2);","\t\t\t\t\tthis.$stage.append(items[clones[clones.length - 1]].clone().addClass('cloned'));","\t\t\t\t\tclones.push(items.length - 1 - (clones.length - 1) / 2);","\t\t\t\t\tthis.$stage.prepend(items[clones[clones.length - 1]].clone().addClass('cloned'));","\t\t\t\t}","\t\t\t}","\t\t}","\t}, {","\t\tfilter: [ 'width', 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar rtl = (this.settings.rtl ? 1 : -1),","\t\t\t\twidth = (this.width() / this.settings.items).toFixed(3),","\t\t\t\tcoordinate = 0, merge, i, n;","","\t\t\tthis._coordinates = [];","\t\t\tfor (i = 0, n = this._clones.length + this._items.length; i < n; i++) {","\t\t\t\tmerge = this._mergers[this.relative(i)];","\t\t\t\tmerge = (this.settings.mergeFit && Math.min(merge, this.settings.items)) || merge;","\t\t\t\tcoordinate += (this.settings.autoWidth ? this._items[this.relative(i)].width() + this.settings.margin : width * merge) * rtl;","","\t\t\t\tthis._coordinates.push(coordinate);","\t\t\t}","\t\t}","\t}, {","\t\tfilter: [ 'width', 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar i, n, width = (this.width() / this.settings.items).toFixed(3), css = {","\t\t\t\t'width': Math.abs(this._coordinates[this._coordinates.length - 1]) + this.settings.stagePadding * 2,","\t\t\t\t'padding-left': this.settings.stagePadding || '',","\t\t\t\t'padding-right': this.settings.stagePadding || ''","\t\t\t};","","\t\t\tthis.$stage.css(css);","","\t\t\tcss = { 'width': this.settings.autoWidth ? 'auto' : width - this.settings.margin };","\t\t\tcss[this.settings.rtl ? 'margin-left' : 'margin-right'] = this.settings.margin;","","\t\t\tif (!this.settings.autoWidth && $.grep(this._mergers, function(v) { return v > 1 }).length > 0) {","\t\t\t\tfor (i = 0, n = this._coordinates.length; i < n; i++) {","\t\t\t\t\tcss.width = Math.abs(this._coordinates[i]) - Math.abs(this._coordinates[i - 1] || 0) - this.settings.margin;","\t\t\t\t\tthis.$stage.children().eq(i).css(css);","\t\t\t\t}","\t\t\t} else {","\t\t\t\tthis.$stage.children().css(css);","\t\t\t}","\t\t}","\t}, {","\t\tfilter: [ 'width', 'items', 'settings' ],","\t\trun: function(cache) {","\t\t\tcache.current && this.reset(this.$stage.children().index(cache.current));","\t\t}","\t}, {","\t\tfilter: [ 'position' ],","\t\trun: function() {","\t\t\tthis.animate(this.coordinates(this._current));","\t\t}","\t}, {","\t\tfilter: [ 'width', 'position', 'items', 'settings' ],","\t\trun: function() {","\t\t\tvar rtl = this.settings.rtl ? 1 : -1,","\t\t\t\tpadding = this.settings.stagePadding * 2,","\t\t\t\tbegin = this.coordinates(this.current()) + padding,","\t\t\t\tend = begin + this.width() * rtl,","\t\t\t\tinner, outer, matches = [], i, n;","","\t\t\tfor (i = 0, n = this._coordinates.length; i < n; i++) {","\t\t\t\tinner = this._coordinates[i - 1] || 0;","\t\t\t\touter = Math.abs(this._coordinates[i]) + padding * rtl;","","\t\t\t\tif ((this.op(inner, '<=', begin) && (this.op(inner, '>', end)))","\t\t\t\t\t|| (this.op(outer, '<', begin) && this.op(outer, '>', end))) {","\t\t\t\t\tmatches.push(i);","\t\t\t\t}","\t\t\t}","","\t\t\tthis.$stage.children('.' + this.settings.activeClass).removeClass(this.settings.activeClass);","\t\t\tthis.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass(this.settings.activeClass);","","\t\t\tif (this.settings.center) {","\t\t\t\tthis.$stage.children('.' + this.settings.centerClass).removeClass(this.settings.centerClass);","\t\t\t\tthis.$stage.children().eq(this.current()).addClass(this.settings.centerClass);","\t\t\t}","\t\t}","\t} ];","","\t/**","\t * Initializes the carousel.","\t * @protected","\t */","\tOwl.prototype.initialize = function() {","\t\tthis.trigger('initialize');","","\t\tthis.$element","\t\t\t.addClass(this.settings.baseClass)","\t\t\t.addClass(this.settings.themeClass)","\t\t\t.toggleClass('owl-rtl', this.settings.rtl);","","\t\t// check support","\t\tthis.browserSupport();","","\t\tif (this.settings.autoWidth && this.state.imagesLoaded !== true) {","\t\t\tvar imgs, nestedSelector, width;","\t\t\timgs = this.$element.find('img');","\t\t\tnestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;","\t\t\twidth = this.$element.children(nestedSelector).width();","","\t\t\tif (imgs.length && width <= 0) {","\t\t\t\tthis.preloadAutoWidthImages(imgs);","\t\t\t\treturn false;","\t\t\t}","\t\t}","","\t\tthis.$element.addClass('owl-loading');","","\t\t// create stage","\t\tthis.$stage = $('<' + this.settings.stageElement + ' class=\"owl-stage\"/>')","\t\t\t.wrap('<div class=\"owl-stage-outer\">');","","\t\t// append stage","\t\tthis.$element.append(this.$stage.parent());","","\t\t// append content","\t\tthis.replace(this.$element.children().not(this.$stage.parent()));","","\t\t// set view width","\t\tthis._width = this.$element.width();","","\t\t// update view","\t\tthis.refresh();","","\t\tthis.$element.removeClass('owl-loading').addClass('owl-loaded');","","\t\t// attach generic events","\t\tthis.eventsCall();","","\t\t// attach generic events","\t\tthis.internalEvents();","","\t\t// attach custom control events","\t\tthis.addTriggerableEvents();","","\t\tthis.trigger('initialized');","\t};","","\t/**","\t * Setups the current settings.","\t * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?","\t * @todo Support for media queries by using `matchMedia` would be nice.","\t * @public","\t */","\tOwl.prototype.setup = function() {","\t\tvar viewport = this.viewport(),","\t\t\toverwrites = this.options.responsive,","\t\t\tmatch = -1,","\t\t\tsettings = null;","","\t\tif (!overwrites) {","\t\t\tsettings = $.extend({}, this.options);","\t\t} else {","\t\t\t$.each(overwrites, function(breakpoint) {","\t\t\t\tif (breakpoint <= viewport && breakpoint > match) {","\t\t\t\t\tmatch = Number(breakpoint);","\t\t\t\t}","\t\t\t});","","\t\t\tsettings = $.extend({}, this.options, overwrites[match]);","\t\t\tdelete settings.responsive;","","\t\t\t// responsive class","\t\t\tif (settings.responsiveClass) {","\t\t\t\tthis.$element.attr('class', function(i, c) {","\t\t\t\t\treturn c.replace(/\\b owl-responsive-\\S+/g, '');","\t\t\t\t}).addClass('owl-responsive-' + match);","\t\t\t}","\t\t}","","\t\tif (this.settings === null || this._breakpoint !== match) {","\t\t\tthis.trigger('change', { property: { name: 'settings', value: settings } });","\t\t\tthis._breakpoint = match;","\t\t\tthis.settings = settings;","\t\t\tthis.invalidate('settings');","\t\t\tthis.trigger('changed', { property: { name: 'settings', value: this.settings } });","\t\t}","\t};","","\t/**","\t * Updates option logic if necessery.","\t * @protected","\t */","\tOwl.prototype.optionsLogic = function() {","\t\t// Toggle Center class","\t\tthis.$element.toggleClass('owl-center', this.settings.center);","","\t\t// if items number is less than in body","\t\tif (this.settings.loop && this._items.length < this.settings.items) {","\t\t\tthis.settings.loop = false;","\t\t}","","\t\tif (this.settings.autoWidth) {","\t\t\tthis.settings.stagePadding = false;","\t\t\tthis.settings.merge = false;","\t\t}","\t};","","\t/**","\t * Prepares an item before add.","\t * @todo Rename event parameter `content` to `item`.","\t * @protected","\t * @returns {jQuery|HTMLElement} - The item container.","\t */","\tOwl.prototype.prepare = function(item) {","\t\tvar event = this.trigger('prepare', { content: item });","","\t\tif (!event.data) {","\t\t\tevent.data = $('<' + this.settings.itemElement + '/>')","\t\t\t\t.addClass(this.settings.itemClass).append(item)","\t\t}","","\t\tthis.trigger('prepared', { content: event.data });","","\t\treturn event.data;","\t};","","\t/**","\t * Updates the view.","\t * @public","\t */","\tOwl.prototype.update = function() {","\t\tvar i = 0,","\t\t\tn = this._pipe.length,","\t\t\tfilter = $.proxy(function(p) { return this[p] }, this._invalidated),","\t\t\tcache = {};","","\t\twhile (i < n) {","\t\t\tif (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {","\t\t\t\tthis._pipe[i].run(cache);","\t\t\t}","\t\t\ti++;","\t\t}","","\t\tthis._invalidated = {};","\t};","","\t/**","\t * Gets the width of the view.","\t * @public","\t * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.","\t * @returns {Number} - The width of the view in pixel.","\t */","\tOwl.prototype.width = function(dimension) {","\t\tdimension = dimension || Owl.Width.Default;","\t\tswitch (dimension) {","\t\t\tcase Owl.Width.Inner:","\t\t\tcase Owl.Width.Outer:","\t\t\t\treturn this._width;","\t\t\tdefault:","\t\t\t\treturn this._width - this.settings.stagePadding * 2 + this.settings.margin;","\t\t}","\t};","","\t/**","\t * Refreshes the carousel primarily for adaptive purposes.","\t * @public","\t */","\tOwl.prototype.refresh = function() {","\t\tif (this._items.length === 0) {","\t\t\treturn false;","\t\t}","","\t\tvar start = new Date().getTime();","","\t\tthis.trigger('refresh');","","\t\tthis.setup();","","\t\tthis.optionsLogic();","","\t\t// hide and show methods helps here to set a proper widths,","\t\t// this prevents scrollbar to be calculated in stage width","\t\tthis.$stage.addClass('owl-refresh');","","\t\tthis.update();","","\t\tthis.$stage.removeClass('owl-refresh');","","\t\tthis.state.orientation = window.orientation;","","\t\tthis.watchVisibility();","","\t\tthis.trigger('refreshed');","\t};","","\t/**","\t * Save internal event references and add event based functions.","\t * @protected","\t */","\tOwl.prototype.eventsCall = function() {","\t\t// Save events references","\t\tthis.e._onDragStart = $.proxy(function(e) {","\t\t\tthis.onDragStart(e);","\t\t}, this);","\t\tthis.e._onDragMove = $.proxy(function(e) {","\t\t\tthis.onDragMove(e);","\t\t}, this);","\t\tthis.e._onDragEnd = $.proxy(function(e) {","\t\t\tthis.onDragEnd(e);","\t\t}, this);","\t\tthis.e._onResize = $.proxy(function(e) {","\t\t\tthis.onResize(e);","\t\t}, this);","\t\tthis.e._transitionEnd = $.proxy(function(e) {","\t\t\tthis.transitionEnd(e);","\t\t}, this);","\t\tthis.e._preventClick = $.proxy(function(e) {","\t\t\tthis.preventClick(e);","\t\t}, this);","\t};","","\t/**","\t * Checks window `resize` event.","\t * @protected","\t */","\tOwl.prototype.onThrottledResize = function() {","\t\twindow.clearTimeout(this.resizeTimer);","\t\tthis.resizeTimer = window.setTimeout(this.e._onResize, this.settings.responsiveRefreshRate);","\t};","","\t/**","\t * Checks window `resize` event.","\t * @protected","\t */","\tOwl.prototype.onResize = function() {","\t\tif (!this._items.length) {","\t\t\treturn false;","\t\t}","","\t\tif (this._width === this.$element.width()) {","\t\t\treturn false;","\t\t}","","\t\tif (this.trigger('resize').isDefaultPrevented()) {","\t\t\treturn false;","\t\t}","","\t\tthis._width = this.$element.width();","","\t\tthis.invalidate('width');","","\t\tthis.refresh();","","\t\tthis.trigger('resized');","\t};","","\t/**","\t * Checks for touch/mouse drag event type and add run event handlers.","\t * @protected","\t */","\tOwl.prototype.eventsRouter = function(event) {","\t\tvar type = event.type;","","\t\tif (type === \"mousedown\" || type === \"touchstart\") {","\t\t\tthis.onDragStart(event);","\t\t} else if (type === \"mousemove\" || type === \"touchmove\") {","\t\t\tthis.onDragMove(event);","\t\t} else if (type === \"mouseup\" || type === \"touchend\") {","\t\t\tthis.onDragEnd(event);","\t\t} else if (type === \"touchcancel\") {","\t\t\tthis.onDragEnd(event);","\t\t}","\t};","","\t/**","\t * Checks for touch/mouse drag options and add necessery event handlers.","\t * @protected","\t */","\tOwl.prototype.internalEvents = function() {","\t\tvar isTouch = isTouchSupport(),","\t\t\tisTouchIE = isTouchSupportIE();","","\t\tif (this.settings.mouseDrag){","\t\t\tthis.$stage.on('mousedown', $.proxy(function(event) { this.eventsRouter(event) }, this));","\t\t\tthis.$stage.on('dragstart', function() { return false });","\t\t\tthis.$stage.get(0).onselectstart = function() { return false };","\t\t} else {","\t\t\tthis.$element.addClass('owl-text-select-on');","\t\t}","","\t\tif (this.settings.touchDrag && !isTouchIE){","\t\t\tthis.$stage.on('touchstart touchcancel', $.proxy(function(event) { this.eventsRouter(event) }, this));","\t\t}","","\t\t// catch transitionEnd event","\t\tif (this.transitionEndVendor) {","\t\t\tthis.on(this.$stage.get(0), this.transitionEndVendor, this.e._transitionEnd, false);","\t\t}","","\t\t// responsive","\t\tif (this.settings.responsive !== false) {","\t\t\tthis.on(window, 'resize', $.proxy(this.onThrottledResize, this));","\t\t}","\t};","","\t/**","\t * Handles touchstart/mousedown event.","\t * @protected","\t * @param {Event} event - The event arguments.","\t */","\tOwl.prototype.onDragStart = function(event) {","\t\tvar ev, isTouchEvent, pageX, pageY, animatedPos;","","\t\tev = event.originalEvent || event || window.event;","","\t\t// prevent right click","\t\tif (ev.which === 3 || this.state.isTouch) {","\t\t\treturn false;","\t\t}","","\t\tif (ev.type === 'mousedown') {","\t\t\tthis.$stage.addClass('owl-grab');","\t\t}","","\t\tthis.trigger('drag');","\t\tthis.drag.startTime = new Date().getTime();","\t\tthis.speed(0);","\t\tthis.state.isTouch = true;","\t\tthis.state.isScrolling = false;","\t\tthis.state.isSwiping = false;","\t\tthis.drag.distance = 0;","","\t\tpageX = getTouches(ev).x;","\t\tpageY = getTouches(ev).y;","","\t\t// get stage position left","\t\tthis.drag.offsetX = this.$stage.position().left;","\t\tthis.drag.offsetY = this.$stage.position().top;","","\t\tif (this.settings.rtl) {","\t\t\tthis.drag.offsetX = this.$stage.position().left + this.$stage.width() - this.width()","\t\t\t\t+ this.settings.margin;","\t\t}","","\t\t// catch position // ie to fix","\t\tif (this.state.inMotion && this.support3d) {","\t\t\tanimatedPos = this.getTransformProperty();","\t\t\tthis.drag.offsetX = animatedPos;","\t\t\tthis.animate(animatedPos);","\t\t\tthis.state.inMotion = true;","\t\t} else if (this.state.inMotion && !this.support3d) {","\t\t\tthis.state.inMotion = false;","\t\t\treturn false;","\t\t}","","\t\tthis.drag.startX = pageX - this.drag.offsetX;","\t\tthis.drag.startY = pageY - this.drag.offsetY;","","\t\tthis.drag.start = pageX - this.drag.startX;","\t\tthis.drag.targetEl = ev.target || ev.srcElement;","\t\tthis.drag.updatedX = this.drag.start;","","\t\t// to do/check","\t\t// prevent links and images dragging;","\t\tif (this.drag.targetEl.tagName === \"IMG\" || this.drag.targetEl.tagName === \"A\") {","\t\t\tthis.drag.targetEl.draggable = false;","\t\t}","","\t\t$(document).on('mousemove.owl.dragEvents mouseup.owl.dragEvents touchmove.owl.dragEvents touchend.owl.dragEvents', $.proxy(function(event) {this.eventsRouter(event)},this));","\t};","","\t/**","\t * Handles the touchmove/mousemove events.","\t * @todo Simplify","\t * @protected","\t * @param {Event} event - The event arguments.","\t */","\tOwl.prototype.onDragMove = function(event) {","\t\tvar ev, isTouchEvent, pageX, pageY, minValue, maxValue, pull;","","\t\tif (!this.state.isTouch) {","\t\t\treturn;","\t\t}","","\t\tif (this.state.isScrolling) {","\t\t\treturn;","\t\t}","","\t\tev = event.originalEvent || event || window.event;","","\t\tpageX = getTouches(ev).x;","\t\tpageY = getTouches(ev).y;","","\t\t// Drag Direction","\t\tthis.drag.currentX = pageX - this.drag.startX;","\t\tthis.drag.currentY = pageY - this.drag.startY;","\t\tthis.drag.distance = this.drag.currentX - this.drag.offsetX;","","\t\t// Check move direction","\t\tif (this.drag.distance < 0) {","\t\t\tthis.state.direction = this.settings.rtl ? 'right' : 'left';","\t\t} else if (this.drag.distance > 0) {","\t\t\tthis.state.direction = this.settings.rtl ? 'left' : 'right';","\t\t}","\t\t// Loop","\t\tif (this.settings.loop) {","\t\t\tif (this.op(this.drag.currentX, '>', this.coordinates(this.minimum())) && this.state.direction === 'right') {","\t\t\t\tthis.drag.currentX -= (this.settings.center && this.coordinates(0)) - this.coordinates(this._items.length);","\t\t\t} else if (this.op(this.drag.currentX, '<', this.coordinates(this.maximum())) && this.state.direction === 'left') {","\t\t\t\tthis.drag.currentX += (this.settings.center && this.coordinates(0)) - this.coordinates(this._items.length);","\t\t\t}","\t\t} else {","\t\t\t// pull","\t\t\tminValue = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());","\t\t\tmaxValue = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());","\t\t\tpull = this.settings.pullDrag ? this.drag.distance / 5 : 0;","\t\t\tthis.drag.currentX = Math.max(Math.min(this.drag.currentX, minValue + pull), maxValue + pull);","\t\t}","","\t\t// Lock browser if swiping horizontal","","\t\tif ((this.drag.distance > 8 || this.drag.distance < -8)) {","\t\t\tif (ev.preventDefault !== undefined) {","\t\t\t\tev.preventDefault();","\t\t\t} else {","\t\t\t\tev.returnValue = false;","\t\t\t}","\t\t\tthis.state.isSwiping = true;","\t\t}","","\t\tthis.drag.updatedX = this.drag.currentX;","","\t\t// Lock Owl if scrolling","\t\tif ((this.drag.currentY > 16 || this.drag.currentY < -16) && this.state.isSwiping === false) {","\t\t\tthis.state.isScrolling = true;","\t\t\tthis.drag.updatedX = this.drag.start;","\t\t}","","\t\tthis.animate(this.drag.updatedX);","\t};","","\t/**","\t * Handles the touchend/mouseup events.","\t * @protected","\t */","\tOwl.prototype.onDragEnd = function(event) {","\t\tvar compareTimes, distanceAbs, closest;","","\t\tif (!this.state.isTouch) {","\t\t\treturn;","\t\t}","","\t\tif (event.type === 'mouseup') {","\t\t\tthis.$stage.removeClass('owl-grab');","\t\t}","","\t\tthis.trigger('dragged');","","\t\t// prevent links and images dragging;","\t\tthis.drag.targetEl.removeAttribute(\"draggable\");","","\t\t// remove drag event listeners","","\t\tthis.state.isTouch = false;","\t\tthis.state.isScrolling = false;","\t\tthis.state.isSwiping = false;","","\t\t// to check","\t\tif (this.drag.distance === 0 && this.state.inMotion !== true) {","\t\t\tthis.state.inMotion = false;","\t\t\treturn false;","\t\t}","","\t\t// prevent clicks while scrolling","","\t\tthis.drag.endTime = new Date().getTime();","\t\tcompareTimes = this.drag.endTime - this.drag.startTime;","\t\tdistanceAbs = Math.abs(this.drag.distance);","","\t\t// to test","\t\tif (distanceAbs > 3 || compareTimes > 300) {","\t\t\tthis.removeClick(this.drag.targetEl);","\t\t}","","\t\tclosest = this.closest(this.drag.updatedX);","","\t\tthis.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);","\t\tthis.current(closest);","\t\tthis.invalidate('position');","\t\tthis.update();","","\t\t// if pullDrag is off then fire transitionEnd event manually when stick","\t\t// to border","\t\tif (!this.settings.pullDrag && this.drag.updatedX === this.coordinates(closest)) {","\t\t\tthis.transitionEnd();","\t\t}","","\t\tthis.drag.distance = 0;","","\t\t$(document).off('.owl.dragEvents');","\t};","","\t/**","\t * Attaches `preventClick` to disable link while swipping.","\t * @protected","\t * @param {HTMLElement} [target] - The target of the `click` event.","\t */","\tOwl.prototype.removeClick = function(target) {","\t\tthis.drag.targetEl = target;","\t\t$(target).on('click.preventClick', this.e._preventClick);","\t\t// to make sure click is removed:","\t\twindow.setTimeout(function() {","\t\t\t$(target).off('click.preventClick');","\t\t}, 300);","\t};","","\t/**","\t * Suppresses click event.","\t * @protected","\t * @param {Event} ev - The event arguments.","\t */","\tOwl.prototype.preventClick = function(ev) {","\t\tif (ev.preventDefault) {","\t\t\tev.preventDefault();","\t\t} else {","\t\t\tev.returnValue = false;","\t\t}","\t\tif (ev.stopPropagation) {","\t\t\tev.stopPropagation();","\t\t}","\t\t$(ev.target).off('click.preventClick');","\t};","","\t/**","\t * Catches stage position while animate (only CSS3).","\t * @protected","\t * @returns","\t */","\tOwl.prototype.getTransformProperty = function() {","\t\tvar transform, matrix3d;","","\t\ttransform = window.getComputedStyle(this.$stage.get(0), null).getPropertyValue(this.vendorName + 'transform');","\t\t// var transform = this.$stage.css(this.vendorName + 'transform')","\t\ttransform = transform.replace(/matrix(3d)?\\(|\\)/g, '').split(',');","\t\tmatrix3d = transform.length === 16;","","\t\treturn matrix3d !== true ? transform[4] : transform[12];","\t};","","\t/**","\t * Gets absolute position of the closest item for a coordinate.","\t * @todo Setting `freeDrag` makes `closest` not reusable. See #165.","\t * @protected","\t * @param {Number} coordinate - The coordinate in pixel.","\t * @return {Number} - The absolute position of the closest item.","\t */","\tOwl.prototype.closest = function(coordinate) {","\t\tvar position = -1, pull = 30, width = this.width(), coordinates = this.coordinates();","","\t\tif (!this.settings.freeDrag) {","\t\t\t// check closest item","\t\t\t$.each(coordinates, $.proxy(function(index, value) {","\t\t\t\tif (coordinate > value - pull && coordinate < value + pull) {","\t\t\t\t\tposition = index;","\t\t\t\t} else if (this.op(coordinate, '<', value)","\t\t\t\t\t&& this.op(coordinate, '>', coordinates[index + 1] || value - width)) {","\t\t\t\t\tposition = this.state.direction === 'left' ? index + 1 : index;","\t\t\t\t}","\t\t\t\treturn position === -1;","\t\t\t}, this));","\t\t}","","\t\tif (!this.settings.loop) {","\t\t\t// non loop boundries","\t\t\tif (this.op(coordinate, '>', coordinates[this.minimum()])) {","\t\t\t\tposition = coordinate = this.minimum();","\t\t\t} else if (this.op(coordinate, '<', coordinates[this.maximum()])) {","\t\t\t\tposition = coordinate = this.maximum();","\t\t\t}","\t\t}","","\t\treturn position;","\t};","","\t/**","\t * Animates the stage.","\t * @public","\t * @param {Number} coordinate - The coordinate in pixels.","\t */","\tOwl.prototype.animate = function(coordinate) {","\t\tthis.trigger('translate');","\t\tthis.state.inMotion = this.speed() > 0;","","\t\tif (this.support3d) {","\t\t\tthis.$stage.css({","\t\t\t\ttransform: 'translate3d(' + coordinate + 'px' + ',0px, 0px)',","\t\t\t\ttransition: (this.speed() / 1000) + 's'","\t\t\t});","\t\t} else if (this.state.isTouch) {","\t\t\tthis.$stage.css({","\t\t\t\tleft: coordinate + 'px'","\t\t\t});","\t\t} else {","\t\t\tthis.$stage.animate({","\t\t\t\tleft: coordinate","\t\t\t}, this.speed() / 1000, this.settings.fallbackEasing, $.proxy(function() {","\t\t\t\tif (this.state.inMotion) {","\t\t\t\t\tthis.transitionEnd();","\t\t\t\t}","\t\t\t}, this));","\t\t}","\t};","","\t/**","\t * Sets the absolute position of the current item.","\t * @public","\t * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.","\t * @returns {Number} - The absolute position of the current item.","\t */","\tOwl.prototype.current = function(position) {","\t\tif (position === undefined) {","\t\t\treturn this._current;","\t\t}","","\t\tif (this._items.length === 0) {","\t\t\treturn undefined;","\t\t}","","\t\tposition = this.normalize(position);","","\t\tif (this._current !== position) {","\t\t\tvar event = this.trigger('change', { property: { name: 'position', value: position } });","","\t\t\tif (event.data !== undefined) {","\t\t\t\tposition = this.normalize(event.data);","\t\t\t}","","\t\t\tthis._current = position;","","\t\t\tthis.invalidate('position');","","\t\t\tthis.trigger('changed', { property: { name: 'position', value: this._current } });","\t\t}","","\t\treturn this._current;","\t};","","\t/**","\t * Invalidates the given part of the update routine.","\t * @param {String} part - The part to invalidate.","\t */","\tOwl.prototype.invalidate = function(part) {","\t\tthis._invalidated[part] = true;","\t}","","\t/**","\t * Resets the absolute position of the current item.","\t * @public","\t * @param {Number} position - The absolute position of the new item.","\t */","\tOwl.prototype.reset = function(position) {","\t\tposition = this.normalize(position);","","\t\tif (position === undefined) {","\t\t\treturn;","\t\t}","","\t\tthis._speed = 0;","\t\tthis._current = position;","","\t\tthis.suppress([ 'translate', 'translated' ]);","","\t\tthis.animate(this.coordinates(position));","","\t\tthis.release([ 'translate', 'translated' ]);","\t};","","\t/**","\t * Normalizes an absolute or a relative position for an item.","\t * @public","\t * @param {Number} position - The absolute or relative position to normalize.","\t * @param {Boolean} [relative=false] - Whether the given position is relative or not.","\t * @returns {Number} - The normalized position.","\t */","\tOwl.prototype.normalize = function(position, relative) {","\t\tvar n = (relative ? this._items.length : this._items.length + this._clones.length);","","\t\tif (!$.isNumeric(position) || n < 1) {","\t\t\treturn undefined;","\t\t}","","\t\tif (this._clones.length) {","\t\t\tposition = ((position % n) + n) % n;","\t\t} else {","\t\t\tposition = Math.max(this.minimum(relative), Math.min(this.maximum(relative), position));","\t\t}","","\t\treturn position;","\t};","","\t/**","\t * Converts an absolute position for an item into a relative position.","\t * @public","\t * @param {Number} position - The absolute position to convert.","\t * @returns {Number} - The converted position.","\t */","\tOwl.prototype.relative = function(position) {","\t\tposition = this.normalize(position);","\t\tposition = position - this._clones.length / 2;","\t\treturn this.normalize(position, true);","\t};","","\t/**","\t * Gets the maximum position for an item.","\t * @public","\t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.","\t * @returns {Number}","\t */","\tOwl.prototype.maximum = function(relative) {","\t\tvar maximum, width, i = 0, coordinate,","\t\t\tsettings = this.settings;","","\t\tif (relative) {","\t\t\treturn this._items.length - 1;","\t\t}","","\t\tif (!settings.loop && settings.center) {","\t\t\tmaximum = this._items.length - 1;","\t\t} else if (!settings.loop && !settings.center) {","\t\t\tmaximum = this._items.length - settings.items;","\t\t} else if (settings.loop || settings.center) {","\t\t\tmaximum = this._items.length + settings.items;","\t\t} else if (settings.autoWidth || settings.merge) {","\t\t\trevert = settings.rtl ? 1 : -1;","\t\t\twidth = this.$stage.width() - this.$element.width();","\t\t\twhile (coordinate = this.coordinates(i)) {","\t\t\t\tif (coordinate * revert >= width) {","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tmaximum = ++i;","\t\t\t}","\t\t} else {","\t\t\tthrow 'Can not detect maximum absolute position.'","\t\t}","","\t\treturn maximum;","\t};","","\t/**","\t * Gets the minimum position for an item.","\t * @public","\t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.","\t * @returns {Number}","\t */","\tOwl.prototype.minimum = function(relative) {","\t\tif (relative) {","\t\t\treturn 0;","\t\t}","","\t\treturn this._clones.length / 2;","\t};","","\t/**","\t * Gets an item at the specified relative position.","\t * @public","\t * @param {Number} [position] - The relative position of the item.","\t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.","\t */","\tOwl.prototype.items = function(position) {","\t\tif (position === undefined) {","\t\t\treturn this._items.slice();","\t\t}","","\t\tposition = this.normalize(position, true);","\t\treturn this._items[position];","\t};","","\t/**","\t * Gets an item at the specified relative position.","\t * @public","\t * @param {Number} [position] - The relative position of the item.","\t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.","\t */","\tOwl.prototype.mergers = function(position) {","\t\tif (position === undefined) {","\t\t\treturn this._mergers.slice();","\t\t}","","\t\tposition = this.normalize(position, true);","\t\treturn this._mergers[position];","\t};","","\t/**","\t * Gets the absolute positions of clones for an item.","\t * @public","\t * @param {Number} [position] - The relative position of the item.","\t * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.","\t */","\tOwl.prototype.clones = function(position) {","\t\tvar odd = this._clones.length / 2,","\t\t\teven = odd + this._items.length,","\t\t\tmap = function(index) { return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2 };","","\t\tif (position === undefined) {","\t\t\treturn $.map(this._clones, function(v, i) { return map(i) });","\t\t}","","\t\treturn $.map(this._clones, function(v, i) { return v === position ? map(i) : null });","\t};","","\t/**","\t * Sets the current animation speed.","\t * @public","\t * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.","\t * @returns {Number} - The current animation speed in milliseconds.","\t */","\tOwl.prototype.speed = function(speed) {","\t\tif (speed !== undefined) {","\t\t\tthis._speed = speed;","\t\t}","","\t\treturn this._speed;","\t};","","\t/**","\t * Gets the coordinate of an item.","\t * @todo The name of this method is missleanding.","\t * @public","\t * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.","\t * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.","\t */","\tOwl.prototype.coordinates = function(position) {","\t\tvar coordinate = null;","","\t\tif (position === undefined) {","\t\t\treturn $.map(this._coordinates, $.proxy(function(coordinate, index) {","\t\t\t\treturn this.coordinates(index);","\t\t\t}, this));","\t\t}","","\t\tif (this.settings.center) {","\t\t\tcoordinate = this._coordinates[position];","\t\t\tcoordinate += (this.width() - coordinate + (this._coordinates[position - 1] || 0)) / 2 * (this.settings.rtl ? -1 : 1);","\t\t} else {","\t\t\tcoordinate = this._coordinates[position - 1] || 0;","\t\t}","","\t\treturn coordinate;","\t};","","\t/**","\t * Calculates the speed for a translation.","\t * @protected","\t * @param {Number} from - The absolute position of the start item.","\t * @param {Number} to - The absolute position of the target item.","\t * @param {Number} [factor=undefined] - The time factor in milliseconds.","\t * @returns {Number} - The time in milliseconds for the translation.","\t */","\tOwl.prototype.duration = function(from, to, factor) {","\t\treturn Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs((factor || this.settings.smartSpeed));","\t};","","\t/**","\t * Slides to the specified item.","\t * @public","\t * @param {Number} position - The position of the item.","\t * @param {Number} [speed] - The time in milliseconds for the transition.","\t */","\tOwl.prototype.to = function(position, speed) {","\t\tif (this.settings.loop) {","\t\t\tvar distance = position - this.relative(this.current()),","\t\t\t\trevert = this.current(),","\t\t\t\tbefore = this.current(),","\t\t\t\tafter = this.current() + distance,","\t\t\t\tdirection = before - after < 0 ? true : false,","\t\t\t\titems = this._clones.length + this._items.length;","","\t\t\tif (after < this.settings.items && direction === false) {","\t\t\t\trevert = before + this._items.length;","\t\t\t\tthis.reset(revert);","\t\t\t} else if (after >= items - this.settings.items && direction === true) {","\t\t\t\trevert = before - this._items.length;","\t\t\t\tthis.reset(revert);","\t\t\t}","\t\t\twindow.clearTimeout(this.e._goToLoop);","\t\t\tthis.e._goToLoop = window.setTimeout($.proxy(function() {","\t\t\t\tthis.speed(this.duration(this.current(), revert + distance, speed));","\t\t\t\tthis.current(revert + distance);","\t\t\t\tthis.update();","\t\t\t}, this), 30);","\t\t} else {","\t\t\tthis.speed(this.duration(this.current(), position, speed));","\t\t\tthis.current(position);","\t\t\tthis.update();","\t\t}","\t};","","\t/**","\t * Slides to the next item.","\t * @public","\t * @param {Number} [speed] - The time in milliseconds for the transition.","\t */","\tOwl.prototype.next = function(speed) {","\t\tspeed = speed || false;","\t\tthis.to(this.relative(this.current()) + 1, speed);","\t};","","\t/**","\t * Slides to the previous item.","\t * @public","\t * @param {Number} [speed] - The time in milliseconds for the transition.","\t */","\tOwl.prototype.prev = function(speed) {","\t\tspeed = speed || false;","\t\tthis.to(this.relative(this.current()) - 1, speed);","\t};","","\t/**","\t * Handles the end of an animation.","\t * @protected","\t * @param {Event} event - The event arguments.","\t */","\tOwl.prototype.transitionEnd = function(event) {","","\t\t// if css2 animation then event object is undefined","\t\tif (event !== undefined) {","\t\t\tevent.stopPropagation();","","\t\t\t// Catch only owl-stage transitionEnd event","\t\t\tif ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {","\t\t\t\treturn false;","\t\t\t}","\t\t}","","\t\tthis.state.inMotion = false;","\t\tthis.trigger('translated');","\t};","","\t/**","\t * Gets viewport width.","\t * @protected","\t * @return {Number} - The width in pixel.","\t */","\tOwl.prototype.viewport = function() {","\t\tvar width;","\t\tif (this.options.responsiveBaseElement !== window) {","\t\t\twidth = $(this.options.responsiveBaseElement).width();","\t\t} else if (window.innerWidth) {","\t\t\twidth = window.innerWidth;","\t\t} else if (document.documentElement && document.documentElement.clientWidth) {","\t\t\twidth = document.documentElement.clientWidth;","\t\t} else {","\t\t\tthrow 'Can not detect viewport width.';","\t\t}","\t\treturn width;","\t};","","\t/**","\t * Replaces the current content.","\t * @public","\t * @param {HTMLElement|jQuery|String} content - The new content.","\t */","\tOwl.prototype.replace = function(content) {","\t\tthis.$stage.empty();","\t\tthis._items = [];","","\t\tif (content) {","\t\t\tcontent = (content instanceof jQuery) ? content : $(content);","\t\t}","","\t\tif (this.settings.nestedItemSelector) {","\t\t\tcontent = content.find('.' + this.settings.nestedItemSelector);","\t\t}","","\t\tcontent.filter(function() {","\t\t\treturn this.nodeType === 1;","\t\t}).each($.proxy(function(index, item) {","\t\t\titem = this.prepare(item);","\t\t\tthis.$stage.append(item);","\t\t\tthis._items.push(item);","\t\t\tthis._mergers.push(item.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);","\t\t}, this));","","\t\tthis.reset($.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);","","\t\tthis.invalidate('items');","\t};","","\t/**","\t * Adds an item.","\t * @todo Use `item` instead of `content` for the event arguments.","\t * @public","\t * @param {HTMLElement|jQuery|String} content - The item content to add.","\t * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.","\t */","\tOwl.prototype.add = function(content, position) {","\t\tposition = position === undefined ? this._items.length : this.normalize(position, true);","","\t\tthis.trigger('add', { content: content, position: position });","","\t\tif (this._items.length === 0 || position === this._items.length) {","\t\t\tthis.$stage.append(content);","\t\t\tthis._items.push(content);","\t\t\tthis._mergers.push(content.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);","\t\t} else {","\t\t\tthis._items[position].before(content);","\t\t\tthis._items.splice(position, 0, content);","\t\t\tthis._mergers.splice(position, 0, content.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);","\t\t}","","\t\tthis.invalidate('items');","","\t\tthis.trigger('added', { content: content, position: position });","\t};","","\t/**","\t * Removes an item by its position.","\t * @todo Use `item` instead of `content` for the event arguments.","\t * @public","\t * @param {Number} position - The relative position of the item to remove.","\t */","\tOwl.prototype.remove = function(position) {","\t\tposition = this.normalize(position, true);","","\t\tif (position === undefined) {","\t\t\treturn;","\t\t}","","\t\tthis.trigger('remove', { content: this._items[position], position: position });","","\t\tthis._items[position].remove();","\t\tthis._items.splice(position, 1);","\t\tthis._mergers.splice(position, 1);","","\t\tthis.invalidate('items');","","\t\tthis.trigger('removed', { content: null, position: position });","\t};","","\t/**","\t * Adds triggerable events.","\t * @protected","\t */","\tOwl.prototype.addTriggerableEvents = function() {","\t\tvar handler = $.proxy(function(callback, event) {","\t\t\treturn $.proxy(function(e) {","\t\t\t\tif (e.relatedTarget !== this) {","\t\t\t\t\tthis.suppress([ event ]);","\t\t\t\t\tcallback.apply(this, [].slice.call(arguments, 1));","\t\t\t\t\tthis.release([ event ]);","\t\t\t\t}","\t\t\t}, this);","\t\t}, this);","","\t\t$.each({","\t\t\t'next': this.next,","\t\t\t'prev': this.prev,","\t\t\t'to': this.to,","\t\t\t'destroy': this.destroy,","\t\t\t'refresh': this.refresh,","\t\t\t'replace': this.replace,","\t\t\t'add': this.add,","\t\t\t'remove': this.remove","\t\t}, $.proxy(function(event, callback) {","\t\t\tthis.$element.on(event + '.owl.carousel', handler(callback, event + '.owl.carousel'));","\t\t}, this));","","\t};","","\t/**","\t * Watches the visibility of the carousel element.","\t * @protected","\t */","\tOwl.prototype.watchVisibility = function() {","","\t\t// test on zepto","\t\tif (!isElVisible(this.$element.get(0))) {","\t\t\tthis.$element.addClass('owl-hidden');","\t\t\twindow.clearInterval(this.e._checkVisibile);","\t\t\tthis.e._checkVisibile = window.setInterval($.proxy(checkVisible, this), 500);","\t\t}","","\t\tfunction isElVisible(el) {","\t\t\treturn el.offsetWidth > 0 && el.offsetHeight > 0;","\t\t}","","\t\tfunction checkVisible() {","\t\t\tif (isElVisible(this.$element.get(0))) {","\t\t\t\tthis.$element.removeClass('owl-hidden');","\t\t\t\tthis.refresh();","\t\t\t\twindow.clearInterval(this.e._checkVisibile);","\t\t\t}","\t\t}","\t};","","\t/**","\t * Preloads images with auto width.","\t * @protected","\t * @todo Still to test","\t */","\tOwl.prototype.preloadAutoWidthImages = function(imgs) {","\t\tvar loaded, that, $el, img;","","\t\tloaded = 0;","\t\tthat = this;","\t\timgs.each(function(i, el) {","\t\t\t$el = $(el);","\t\t\timg = new Image();","","\t\t\timg.onload = function() {","\t\t\t\tloaded++;","\t\t\t\t$el.attr('src', img.src);","\t\t\t\t$el.css('opacity', 1);","\t\t\t\tif (loaded >= imgs.length) {","\t\t\t\t\tthat.state.imagesLoaded = true;","\t\t\t\t\tthat.initialize();","\t\t\t\t}","\t\t\t};","","\t\t\timg.src = $el.attr('src') || $el.attr('data-src') || $el.attr('data-src-retina');","\t\t});","\t};","","\t/**","\t * Destroys the carousel.","\t * @public","\t */","\tOwl.prototype.destroy = function() {","","\t\tif (this.$element.hasClass(this.settings.themeClass)) {","\t\t\tthis.$element.removeClass(this.settings.themeClass);","\t\t}","","\t\tif (this.settings.responsive !== false) {","\t\t\t$(window).off('resize.owl.carousel');","\t\t}","","\t\tif (this.transitionEndVendor) {","\t\t\tthis.off(this.$stage.get(0), this.transitionEndVendor, this.e._transitionEnd);","\t\t}","","\t\tfor ( var i in this._plugins) {","\t\t\tthis._plugins[i].destroy();","\t\t}","","\t\tif (this.settings.mouseDrag || this.settings.touchDrag) {","\t\t\tthis.$stage.off('mousedown touchstart touchcancel');","\t\t\t$(document).off('.owl.dragEvents');","\t\t\tthis.$stage.get(0).onselectstart = function() {};","\t\t\tthis.$stage.off('dragstart', function() { return false });","\t\t}","","\t\t// remove event handlers in the \".owl.carousel\" namespace","\t\tthis.$element.off('.owl');","","\t\tthis.$stage.children('.cloned').remove();","\t\tthis.e = null;","\t\tthis.$element.removeData('owlCarousel');","","\t\tthis.$stage.children().contents().unwrap();","\t\tthis.$stage.children().unwrap();","\t\tthis.$stage.unwrap();","\t};","","\t/**","\t * Operators to calculate right-to-left and left-to-right.","\t * @protected","\t * @param {Number} [a] - The left side operand.","\t * @param {String} [o] - The operator.","\t * @param {Number} [b] - The right side operand.","\t */","\tOwl.prototype.op = function(a, o, b) {","\t\tvar rtl = this.settings.rtl;","\t\tswitch (o) {","\t\t\tcase '<':","\t\t\t\treturn rtl ? a > b : a < b;","\t\t\tcase '>':","\t\t\t\treturn rtl ? a < b : a > b;","\t\t\tcase '>=':","\t\t\t\treturn rtl ? a <= b : a >= b;","\t\t\tcase '<=':","\t\t\t\treturn rtl ? a >= b : a <= b;","\t\t\tdefault:","\t\t\t\tbreak;","\t\t}","\t};","","\t/**","\t * Attaches to an internal event.","\t * @protected","\t * @param {HTMLElement} element - The event source.","\t * @param {String} event - The event name.","\t * @param {Function} listener - The event handler to attach.","\t * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.","\t */","\tOwl.prototype.on = function(element, event, listener, capture) {","\t\tif (element.addEventListener) {","\t\t\telement.addEventListener(event, listener, capture);","\t\t} else if (element.attachEvent) {","\t\t\telement.attachEvent('on' + event, listener);","\t\t}","\t};","","\t/**","\t * Detaches from an internal event.","\t * @protected","\t * @param {HTMLElement} element - The event source.","\t * @param {String} event - The event name.","\t * @param {Function} listener - The attached event handler to detach.","\t * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.","\t */","\tOwl.prototype.off = function(element, event, listener, capture) {","\t\tif (element.removeEventListener) {","\t\t\telement.removeEventListener(event, listener, capture);","\t\t} else if (element.detachEvent) {","\t\t\telement.detachEvent('on' + event, listener);","\t\t}","\t};","","\t/**","\t * Triggers an public event.","\t * @protected","\t * @param {String} name - The event name.","\t * @param {*} [data=null] - The event data.","\t * @param {String} [namespace=.owl.carousel] - The event namespace.","\t * @returns {Event} - The event arguments.","\t */","\tOwl.prototype.trigger = function(name, data, namespace) {","\t\tvar status = {","\t\t\titem: { count: this._items.length, index: this.current() }","\t\t}, handler = $.camelCase(","\t\t\t$.grep([ 'on', name, namespace ], function(v) { return v })","\t\t\t\t.join('-').toLowerCase()","\t\t), event = $.Event(","\t\t\t[ name, 'owl', namespace || 'carousel' ].join('.').toLowerCase(),","\t\t\t$.extend({ relatedTarget: this }, status, data)","\t\t);","","\t\tif (!this._supress[name]) {","\t\t\t$.each(this._plugins, function(name, plugin) {","\t\t\t\tif (plugin.onTrigger) {","\t\t\t\t\tplugin.onTrigger(event);","\t\t\t\t}","\t\t\t});","","\t\t\tthis.$element.trigger(event);","","\t\t\tif (this.settings && typeof this.settings[handler] === 'function') {","\t\t\t\tthis.settings[handler].apply(this, event);","\t\t\t}","\t\t}","","\t\treturn event;","\t};","","\t/**","\t * Suppresses events.","\t * @protected","\t * @param {Array.<String>} events - The events to suppress.","\t */","\tOwl.prototype.suppress = function(events) {","\t\t$.each(events, $.proxy(function(index, event) {","\t\t\tthis._supress[event] = true;","\t\t}, this));","\t}","","\t/**","\t * Releases suppressed events.","\t * @protected","\t * @param {Array.<String>} events - The events to release.","\t */","\tOwl.prototype.release = function(events) {","\t\t$.each(events, $.proxy(function(index, event) {","\t\t\tdelete this._supress[event];","\t\t}, this));","\t}","","\t/**","\t * Checks the availability of some browser features.","\t * @protected","\t */","\tOwl.prototype.browserSupport = function() {","\t\tthis.support3d = isPerspective();","","\t\tif (this.support3d) {","\t\t\tthis.transformVendor = isTransform();","","\t\t\t// take transitionend event name by detecting transition","\t\t\tvar endVendors = [ 'transitionend', 'webkitTransitionEnd', 'transitionend', 'oTransitionEnd' ];","\t\t\tthis.transitionEndVendor = endVendors[isTransition()];","","\t\t\t// take vendor name from transform name","\t\t\tthis.vendorName = this.transformVendor.replace(/Transform/i, '');","\t\t\tthis.vendorName = this.vendorName !== '' ? '-' + this.vendorName.toLowerCase() + '-' : '';","\t\t}","","\t\tthis.state.orientation = window.orientation;","\t};","","\t/**","\t * Get touch/drag coordinats.","\t * @private","\t * @param {event} - mousedown/touchstart event","\t * @returns {object} - Contains X and Y of current mouse/touch position","\t */","","\tfunction getTouches(event) {","\t\tif (event.touches !== undefined) {","\t\t\treturn {","\t\t\t\tx: event.touches[0].pageX,","\t\t\t\ty: event.touches[0].pageY","\t\t\t};","\t\t}","","\t\tif (event.touches === undefined) {","\t\t\tif (event.pageX !== undefined) {","\t\t\t\treturn {","\t\t\t\t\tx: event.pageX,","\t\t\t\t\ty: event.pageY","\t\t\t\t};","\t\t\t}","","\t\tif (event.pageX === undefined) {","\t\t\treturn {","\t\t\t\t\tx: event.clientX,","\t\t\t\t\ty: event.clientY","\t\t\t\t};","\t\t\t}","\t\t}","\t}","","\t/**","\t * Checks for CSS support.","\t * @private","\t * @param {Array} array - The CSS properties to check for.","\t * @returns {Array} - Contains the supported CSS property name and its index or `false`.","\t */","\tfunction isStyleSupported(array) {","\t\tvar p, s, fake = document.createElement('div'), list = array;","\t\tfor (p in list) {","\t\t\ts = list[p];","\t\t\tif (typeof fake.style[s] !== 'undefined') {","\t\t\t\tfake = null;","\t\t\t\treturn [ s, p ];","\t\t\t}","\t\t}","\t\treturn [ false ];","\t}","","\t/**","\t * Checks for CSS transition support.","\t * @private","\t * @todo Realy bad design","\t * @returns {Number}","\t */","\tfunction isTransition() {","\t\treturn isStyleSupported([ 'transition', 'WebkitTransition', 'MozTransition', 'OTransition' ])[1];","\t}","","\t/**","\t * Checks for CSS transform support.","\t * @private","\t * @returns {String} The supported property name or false.","\t */","\tfunction isTransform() {","\t\treturn isStyleSupported([ 'transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform' ])[0];","\t}","","\t/**","\t * Checks for CSS perspective support.","\t * @private","\t * @returns {String} The supported property name or false.","\t */","\tfunction isPerspective() {","\t\treturn isStyleSupported([ 'perspective', 'webkitPerspective', 'MozPerspective', 'OPerspective', 'MsPerspective' ])[0];","\t}","","\t/**","\t * Checks wether touch is supported or not.","\t * @private","\t * @returns {Boolean}","\t */","\tfunction isTouchSupport() {","\t\treturn 'ontouchstart' in window || !!(navigator.msMaxTouchPoints);","\t}","","\t/**","\t * Checks wether touch is supported or not for IE.","\t * @private","\t * @returns {Boolean}","\t */","\tfunction isTouchSupportIE() {","\t\treturn window.navigator.msPointerEnabled;","\t}","","\t/**","\t * The jQuery Plugin for the Owl Carousel","\t * @public","\t */","\t$.fn.owlCarousel = function(options) {","\t\treturn this.each(function() {","\t\t\tif (!$(this).data('owlCarousel')) {","\t\t\t\t$(this).data('owlCarousel', new Owl(this, options));","\t\t\t}","\t\t});","\t};","","\t/**","\t * The constructor for the jQuery Plugin","\t * @public","\t */","\t$.fn.owlCarousel.Constructor = Owl;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Lazy Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the lazy plugin.","\t * @class The Lazy Plugin","\t * @param {Owl} carousel - The Owl Carousel","\t */","\tvar Lazy = function(carousel) {","","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * Already loaded items.","\t\t * @protected","\t\t * @type {Array.<jQuery>}","\t\t */","\t\tthis._loaded = [];","","\t\t/**","\t\t * Event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'initialized.owl.carousel change.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (!e.namespace) {","\t\t\t\t\treturn;","\t\t\t\t}","","\t\t\t\tif (!this._core.settings || !this._core.settings.lazyLoad) {","\t\t\t\t\treturn;","\t\t\t\t}","","\t\t\t\tif ((e.property && e.property.name == 'position') || e.type == 'initialized') {","\t\t\t\t\tvar settings = this._core.settings,","\t\t\t\t\t\tn = (settings.center && Math.ceil(settings.items / 2) || settings.items),","\t\t\t\t\t\ti = ((settings.center && n * -1) || 0),","\t\t\t\t\t\tposition = ((e.property && e.property.value) || this._core.current()) + i,","\t\t\t\t\t\tclones = this._core.clones().length,","\t\t\t\t\t\tload = $.proxy(function(i, v) { this.load(v) }, this);","","\t\t\t\t\twhile (i++ < n) {","\t\t\t\t\t\tthis.load(clones / 2 + this._core.relative(position));","\t\t\t\t\t\tclones && $.each(this._core.clones(this._core.relative(position++)), load);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\t// set the default options","\t\tthis._core.options = $.extend({}, Lazy.Defaults, this._core.options);","","\t\t// register event handler","\t\tthis._core.$element.on(this._handlers);","\t}","","\t/**","\t * Default options.","\t * @public","\t */","\tLazy.Defaults = {","\t\tlazyLoad: false","\t}","","\t/**","\t * Loads all resources of an item at the specified position.","\t * @param {Number} position - The absolute position of the item.","\t * @protected","\t */","\tLazy.prototype.load = function(position) {","\t\tvar $item = this._core.$stage.children().eq(position),","\t\t\t$elements = $item && $item.find('.owl-lazy');","","\t\tif (!$elements || $.inArray($item.get(0), this._loaded) > -1) {","\t\t\treturn;","\t\t}","","\t\t$elements.each($.proxy(function(index, element) {","\t\t\tvar $element = $(element), image,","\t\t\t\turl = (window.devicePixelRatio > 1 && $element.attr('data-src-retina')) || $element.attr('data-src');","","\t\t\tthis._core.trigger('load', { element: $element, url: url }, 'lazy');","","\t\t\tif ($element.is('img')) {","\t\t\t\t$element.one('load.owl.lazy', $.proxy(function() {","\t\t\t\t\t$element.css('opacity', 1);","\t\t\t\t\tthis._core.trigger('loaded', { element: $element, url: url }, 'lazy');","\t\t\t\t}, this)).attr('src', url);","\t\t\t} else {","\t\t\t\timage = new Image();","\t\t\t\timage.onload = $.proxy(function() {","\t\t\t\t\t$element.css({","\t\t\t\t\t\t'background-image': 'url(' + url + ')',","\t\t\t\t\t\t'opacity': '1'","\t\t\t\t\t});","\t\t\t\t\tthis._core.trigger('loaded', { element: $element, url: url }, 'lazy');","\t\t\t\t}, this);","\t\t\t\timage.src = url;","\t\t\t}","\t\t}, this));","","\t\tthis._loaded.push($item.get(0));","\t}","","\t/**","\t * Destroys the plugin.","\t * @public","\t */","\tLazy.prototype.destroy = function() {","\t\tvar handler, property;","","\t\tfor (handler in this.handlers) {","\t\t\tthis._core.$element.off(handler, this.handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t}","","\t$.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * AutoHeight Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the auto height plugin.","\t * @class The Auto Height Plugin","\t * @param {Owl} carousel - The Owl Carousel","\t */","\tvar AutoHeight = function(carousel) {","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * All event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'initialized.owl.carousel': $.proxy(function() {","\t\t\t\tif (this._core.settings.autoHeight) {","\t\t\t\t\tthis.update();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'changed.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.autoHeight && e.property.name == 'position'){","\t\t\t\t\tthis.update();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'loaded.owl.lazy': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass)","\t\t\t\t\t=== this._core.$stage.children().eq(this._core.current())) {","\t\t\t\t\tthis.update();","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\t// set default options","\t\tthis._core.options = $.extend({}, AutoHeight.Defaults, this._core.options);","","\t\t// register event handlers","\t\tthis._core.$element.on(this._handlers);","\t};","","\t/**","\t * Default options.","\t * @public","\t */","\tAutoHeight.Defaults = {","\t\tautoHeight: false,","\t\tautoHeightClass: 'owl-height'","\t};","","\t/**","\t * Updates the view.","\t */","\tAutoHeight.prototype.update = function() {","\t\tthis._core.$stage.parent()","\t\t\t.height(this._core.$stage.children().eq(this._core.current()).height())","\t\t\t.addClass(this._core.settings.autoHeightClass);","\t};","","\tAutoHeight.prototype.destroy = function() {","\t\tvar handler, property;","","\t\tfor (handler in this._handlers) {","\t\t\tthis._core.$element.off(handler, this._handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t};","","\t$.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Video Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the video plugin.","\t * @class The Video Plugin","\t * @param {Owl} carousel - The Owl Carousel","\t */","\tvar Video = function(carousel) {","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * Cache all video URLs.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._videos = {};","","\t\t/**","\t\t * Current playing item.","\t\t * @protected","\t\t * @type {jQuery}","\t\t */","\t\tthis._playing = null;","","\t\t/**","\t\t * Whether this is in fullscreen or not.","\t\t * @protected","\t\t * @type {Boolean}","\t\t */","\t\tthis._fullscreen = false;","","\t\t/**","\t\t * All event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'resize.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.video && !this.isInFullScreen()) {","\t\t\t\t\te.preventDefault();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'refresh.owl.carousel changed.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._playing) {","\t\t\t\t\tthis.stop();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'prepared.owl.carousel': $.proxy(function(e) {","\t\t\t\tvar $element = $(e.content).find('.owl-video');","\t\t\t\tif ($element.length) {","\t\t\t\t\t$element.css('display', 'none');","\t\t\t\t\tthis.fetch($element, $(e.content));","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\t// set default options","\t\tthis._core.options = $.extend({}, Video.Defaults, this._core.options);","","\t\t// register event handlers","\t\tthis._core.$element.on(this._handlers);","","\t\tthis._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function(e) {","\t\t\tthis.play(e);","\t\t}, this));","\t};","","\t/**","\t * Default options.","\t * @public","\t */","\tVideo.Defaults = {","\t\tvideo: false,","\t\tvideoHeight: false,","\t\tvideoWidth: false","\t};","","\t/**","\t * Gets the video ID and the type (YouTube/Vimeo only).","\t * @protected","\t * @param {jQuery} target - The target containing the video data.","\t * @param {jQuery} item - The item containing the video.","\t */","\tVideo.prototype.fetch = function(target, item) {","","\t\tvar type = target.attr('data-vimeo-id') ? 'vimeo' : 'youtube',","\t\t\tid = target.attr('data-vimeo-id') || target.attr('data-youtube-id'),","\t\t\twidth = target.attr('data-width') || this._core.settings.videoWidth,","\t\t\theight = target.attr('data-height') || this._core.settings.videoHeight,","\t\t\turl = target.attr('href');","","\t\tif (url) {","\t\t\tid = url.match(/(http:|https:|)\\/\\/(player.|www.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com))\\/(video\\/|embed\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/);","","\t\t\tif (id[3].indexOf('youtu') > -1) {","\t\t\t\ttype = 'youtube';","\t\t\t} else if (id[3].indexOf('vimeo') > -1) {","\t\t\t\ttype = 'vimeo';","\t\t\t} else {","\t\t\t\tthrow new Error('Video URL not supported.');","\t\t\t}","\t\t\tid = id[6];","\t\t} else {","\t\t\tthrow new Error('Missing video URL.');","\t\t}","","\t\tthis._videos[url] = {","\t\t\ttype: type,","\t\t\tid: id,","\t\t\twidth: width,","\t\t\theight: height","\t\t};","","\t\titem.attr('data-video', url);","","\t\tthis.thumbnail(target, this._videos[url]);","\t};","","\t/**","\t * Creates video thumbnail.","\t * @protected","\t * @param {jQuery} target - The target containing the video data.","\t * @param {Object} info - The video info object.","\t * @see `fetch`","\t */","\tVideo.prototype.thumbnail = function(target, video) {","","\t\tvar tnLink,","\t\t\ticon,","\t\t\tpath,","\t\t\tdimensions = video.width && video.height ? 'style=\"width:' + video.width + 'px;height:' + video.height + 'px;\"' : '',","\t\t\tcustomTn = target.find('img'),","\t\t\tsrcType = 'src',","\t\t\tlazyClass = '',","\t\t\tsettings = this._core.settings,","\t\t\tcreate = function(path) {","\t\t\t\ticon = '<div class=\"owl-video-play-icon\"></div>';","","\t\t\t\tif (settings.lazyLoad) {","\t\t\t\t\ttnLink = '<div class=\"owl-video-tn ' + lazyClass + '\" ' + srcType + '=\"' + path + '\"></div>';","\t\t\t\t} else {","\t\t\t\t\ttnLink = '<div class=\"owl-video-tn\" style=\"opacity:1;background-image:url(' + path + ')\"></div>';","\t\t\t\t}","\t\t\t\ttarget.after(tnLink);","\t\t\t\ttarget.after(icon);","\t\t\t};","","\t\t// wrap video content into owl-video-wrapper div","\t\ttarget.wrap('<div class=\"owl-video-wrapper\"' + dimensions + '></div>');","","\t\tif (this._core.settings.lazyLoad) {","\t\t\tsrcType = 'data-src';","\t\t\tlazyClass = 'owl-lazy';","\t\t}","","\t\t// custom thumbnail","\t\tif (customTn.length) {","\t\t\tcreate(customTn.attr(srcType));","\t\t\tcustomTn.remove();","\t\t\treturn false;","\t\t}","","\t\tif (video.type === 'youtube') {","\t\t\tpath = \"http://img.youtube.com/vi/\" + video.id + \"/hqdefault.jpg\";","\t\t\tcreate(path);","\t\t} else if (video.type === 'vimeo') {","\t\t\t$.ajax({","\t\t\t\ttype: 'GET',","\t\t\t\turl: 'http://vimeo.com/api/v2/video/' + video.id + '.json',","\t\t\t\tjsonp: 'callback',","\t\t\t\tdataType: 'jsonp',","\t\t\t\tsuccess: function(data) {","\t\t\t\t\tpath = data[0].thumbnail_large;","\t\t\t\t\tcreate(path);","\t\t\t\t}","\t\t\t});","\t\t}","\t};","","\t/**","\t * Stops the current video.","\t * @public","\t */","\tVideo.prototype.stop = function() {","\t\tthis._core.trigger('stop', null, 'video');","\t\tthis._playing.find('.owl-video-frame').remove();","\t\tthis._playing.removeClass('owl-video-playing');","\t\tthis._playing = null;","\t};","","\t/**","\t * Starts the current video.","\t * @public","\t * @param {Event} ev - The event arguments.","\t */","\tVideo.prototype.play = function(ev) {","\t\tthis._core.trigger('play', null, 'video');","","\t\tif (this._playing) {","\t\t\tthis.stop();","\t\t}","","\t\tvar target = $(ev.target || ev.srcElement),","\t\t\titem = target.closest('.' + this._core.settings.itemClass),","\t\t\tvideo = this._videos[item.attr('data-video')],","\t\t\twidth = video.width || '100%',","\t\t\theight = video.height || this._core.$stage.height(),","\t\t\thtml, wrap;","","\t\tif (video.type === 'youtube') {","\t\t\thtml = '<iframe width=\"' + width + '\" height=\"' + height + '\" src=\"http://www.youtube.com/embed/'","\t\t\t\t+ video.id + '?autoplay=1&v=' + video.id + '\" frameborder=\"0\" allowfullscreen></iframe>';","\t\t} else if (video.type === 'vimeo') {","\t\t\thtml = '<iframe src=\"http://player.vimeo.com/video/' + video.id + '?autoplay=1\" width=\"' + width","\t\t\t\t+ '\" height=\"' + height","\t\t\t\t+ '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';","\t\t}","","\t\titem.addClass('owl-video-playing');","\t\tthis._playing = item;","","\t\twrap = $('<div style=\"height:' + height + 'px; width:' + width + 'px\" class=\"owl-video-frame\">'","\t\t\t+ html + '</div>');","\t\ttarget.after(wrap);","\t};","","\t/**","\t * Checks whether an video is currently in full screen mode or not.","\t * @todo Bad style because looks like a readonly method but changes members.","\t * @protected","\t * @returns {Boolean}","\t */","\tVideo.prototype.isInFullScreen = function() {","","\t\t// if Vimeo Fullscreen mode","\t\tvar element = document.fullscreenElement || document.mozFullScreenElement","\t\t\t|| document.webkitFullscreenElement;","","\t\tif (element && $(element).parent().hasClass('owl-video-frame')) {","\t\t\tthis._core.speed(0);","\t\t\tthis._fullscreen = true;","\t\t}","","\t\tif (element && this._fullscreen && this._playing) {","\t\t\treturn false;","\t\t}","","\t\t// comming back from fullscreen","\t\tif (this._fullscreen) {","\t\t\tthis._fullscreen = false;","\t\t\treturn false;","\t\t}","","\t\t// check full screen mode and window orientation","\t\tif (this._playing) {","\t\t\tif (this._core.state.orientation !== window.orientation) {","\t\t\t\tthis._core.state.orientation = window.orientation;","\t\t\t\treturn false;","\t\t\t}","\t\t}","","\t\treturn true;","\t};","","\t/**","\t * Destroys the plugin.","\t */","\tVideo.prototype.destroy = function() {","\t\tvar handler, property;","","\t\tthis._core.$element.off('click.owl.video');","","\t\tfor (handler in this._handlers) {","\t\t\tthis._core.$element.off(handler, this._handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t};","","\t$.fn.owlCarousel.Constructor.Plugins.Video = Video;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Animate Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the animate plugin.","\t * @class The Navigation Plugin","\t * @param {Owl} scope - The Owl Carousel","\t */","\tvar Animate = function(scope) {","\t\tthis.core = scope;","\t\tthis.core.options = $.extend({}, Animate.Defaults, this.core.options);","\t\tthis.swapping = true;","\t\tthis.previous = undefined;","\t\tthis.next = undefined;","","\t\tthis.handlers = {","\t\t\t'change.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (e.property.name == 'position') {","\t\t\t\t\tthis.previous = this.core.current();","\t\t\t\t\tthis.next = e.property.value;","\t\t\t\t}","\t\t\t}, this),","\t\t\t'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function(e) {","\t\t\t\tthis.swapping = e.type == 'translated';","\t\t\t}, this),","\t\t\t'translate.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {","\t\t\t\t\tthis.swap();","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\tthis.core.$element.on(this.handlers);","\t};","","\t/**","\t * Default options.","\t * @public","\t */","\tAnimate.Defaults = {","\t\tanimateOut: false,","\t\tanimateIn: false","\t};","","\t/**","\t * Toggles the animation classes whenever an translations starts.","\t * @protected","\t * @returns {Boolean|undefined}","\t */","\tAnimate.prototype.swap = function() {","","\t\tif (this.core.settings.items !== 1 || !this.core.support3d) {","\t\t\treturn;","\t\t}","","\t\tthis.core.speed(0);","","\t\tvar left,","\t\t\tclear = $.proxy(this.clear, this),","\t\t\tprevious = this.core.$stage.children().eq(this.previous),","\t\t\tnext = this.core.$stage.children().eq(this.next),","\t\t\tincoming = this.core.settings.animateIn,","\t\t\toutgoing = this.core.settings.animateOut;","","\t\tif (this.core.current() === this.previous) {","\t\t\treturn;","\t\t}","","\t\tif (outgoing) {","\t\t\tleft = this.core.coordinates(this.previous) - this.core.coordinates(this.next);","\t\t\tprevious.css( { 'left': left + 'px' } )","\t\t\t\t.addClass('animated owl-animated-out')","\t\t\t\t.addClass(outgoing)","\t\t\t\t.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', clear);","\t\t}","","\t\tif (incoming) {","\t\t\tnext.addClass('animated owl-animated-in')","\t\t\t\t.addClass(incoming)","\t\t\t\t.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', clear);","\t\t}","\t};","","\tAnimate.prototype.clear = function(e) {","\t\t$(e.target).css( { 'left': '' } )","\t\t\t.removeClass('animated owl-animated-out owl-animated-in')","\t\t\t.removeClass(this.core.settings.animateIn)","\t\t\t.removeClass(this.core.settings.animateOut);","\t\tthis.core.transitionEnd();","\t}","","\t/**","\t * Destroys the plugin.","\t * @public","\t */","\tAnimate.prototype.destroy = function() {","\t\tvar handler, property;","","\t\tfor (handler in this.handlers) {","\t\t\tthis.core.$element.off(handler, this.handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t};","","\t$.fn.owlCarousel.Constructor.Plugins.Animate = Animate;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Autoplay Plugin"," * @version 2.0.0"," * @author Bartosz Wojciechowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","","\t/**","\t * Creates the autoplay plugin.","\t * @class The Autoplay Plugin","\t * @param {Owl} scope - The Owl Carousel","\t */","\tvar Autoplay = function(scope) {","\t\tthis.core = scope;","\t\tthis.core.options = $.extend({}, Autoplay.Defaults, this.core.options);","","\t\tthis.handlers = {","\t\t\t'translated.owl.carousel refreshed.owl.carousel': $.proxy(function() {","\t\t\t\tthis.autoplay();","\t\t\t}, this),","\t\t\t'play.owl.autoplay': $.proxy(function(e, t, s) {","\t\t\t\tthis.play(t, s);","\t\t\t}, this),","\t\t\t'stop.owl.autoplay': $.proxy(function() {","\t\t\t\tthis.stop();","\t\t\t}, this),","\t\t\t'mouseover.owl.autoplay': $.proxy(function() {","\t\t\t\tif (this.core.settings.autoplayHoverPause) {","\t\t\t\t\tthis.pause();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'mouseleave.owl.autoplay': $.proxy(function() {","\t\t\t\tif (this.core.settings.autoplayHoverPause) {","\t\t\t\t\tthis.autoplay();","\t\t\t\t}","\t\t\t}, this)","\t\t};","","\t\tthis.core.$element.on(this.handlers);","\t};","","\t/**","\t * Default options.","\t * @public","\t */","\tAutoplay.Defaults = {","\t\tautoplay: false,","\t\tautoplayTimeout: 5000,","\t\tautoplayHoverPause: false,","\t\tautoplaySpeed: false","\t};","","\t/**","\t * @protected","\t * @todo Must be documented.","\t */","\tAutoplay.prototype.autoplay = function() {","\t\tif (this.core.settings.autoplay && !this.core.state.videoPlay) {","\t\t\twindow.clearInterval(this.interval);","","\t\t\tthis.interval = window.setInterval($.proxy(function() {","\t\t\t\tthis.play();","\t\t\t}, this), this.core.settings.autoplayTimeout);","\t\t} else {","\t\t\twindow.clearInterval(this.interval);","\t\t}","\t};","","\t/**","\t * Starts the autoplay.","\t * @public","\t * @param {Number} [timeout] - ...","\t * @param {Number} [speed] - ...","\t * @returns {Boolean|undefined} - ...","\t * @todo Must be documented.","\t */","\tAutoplay.prototype.play = function(timeout, speed) {","\t\t// if tab is inactive - doesnt work in <IE10","\t\tif (document.hidden === true) {","\t\t\treturn;","\t\t}","","\t\tif (this.core.state.isTouch || this.core.state.isScrolling","\t\t\t|| this.core.state.isSwiping || this.core.state.inMotion) {","\t\t\treturn;","\t\t}","","\t\tif (this.core.settings.autoplay === false) {","\t\t\twindow.clearInterval(this.interval);","\t\t\treturn;","\t\t}","","\t\tthis.core.next(this.core.settings.autoplaySpeed);","\t};","","\t/**","\t * Stops the autoplay.","\t * @public","\t */","\tAutoplay.prototype.stop = function() {","\t\twindow.clearInterval(this.interval);","\t};","","\t/**","\t * Pauses the autoplay.","\t * @public","\t */","\tAutoplay.prototype.pause = function() {","\t\twindow.clearInterval(this.interval);","\t};","","\t/**","\t * Destroys the plugin.","\t */","\tAutoplay.prototype.destroy = function() {","\t\tvar handler, property;","","\t\twindow.clearInterval(this.interval);","","\t\tfor (handler in this.handlers) {","\t\t\tthis.core.$element.off(handler, this.handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t};","","\t$.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Navigation Plugin"," * @version 2.0.0"," * @author Artus Kolanowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","\t'use strict';","","\t/**","\t * Creates the navigation plugin.","\t * @class The Navigation Plugin","\t * @param {Owl} carousel - The Owl Carousel.","\t */","\tvar Navigation = function(carousel) {","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * Indicates whether the plugin is initialized or not.","\t\t * @protected","\t\t * @type {Boolean}","\t\t */","\t\tthis._initialized = false;","","\t\t/**","\t\t * The current paging indexes.","\t\t * @protected","\t\t * @type {Array}","\t\t */","\t\tthis._pages = [];","","\t\t/**","\t\t * All DOM elements of the user interface.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._controls = {};","","\t\t/**","\t\t * Markup for an indicator.","\t\t * @protected","\t\t * @type {Array.<String>}","\t\t */","\t\tthis._templates = [];","","\t\t/**","\t\t * The carousel element.","\t\t * @type {jQuery}","\t\t */","\t\tthis.$element = this._core.$element;","","\t\t/**","\t\t * Overridden methods of the carousel.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._overrides = {","\t\t\tnext: this._core.next,","\t\t\tprev: this._core.prev,","\t\t\tto: this._core.to","\t\t};","","\t\t/**","\t\t * All event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'prepared.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.dotsData) {","\t\t\t\t\tthis._templates.push($(e.content).find('[data-dot]').andSelf('[data-dot]').attr('data-dot'));","\t\t\t\t}","\t\t\t}, this),","\t\t\t'add.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.dotsData) {","\t\t\t\t\tthis._templates.splice(e.position, 0, $(e.content).find('[data-dot]').andSelf('[data-dot]').attr('data-dot'));","\t\t\t\t}","\t\t\t}, this),","\t\t\t'remove.owl.carousel prepared.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (this._core.settings.dotsData) {","\t\t\t\t\tthis._templates.splice(e.position, 1);","\t\t\t\t}","\t\t\t}, this),","\t\t\t'change.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (e.property.name == 'position') {","\t\t\t\t\tif (!this._core.state.revert && !this._core.settings.loop && this._core.settings.navRewind) {","\t\t\t\t\t\tvar current = this._core.current(),","\t\t\t\t\t\t\tmaximum = this._core.maximum(),","\t\t\t\t\t\t\tminimum = this._core.minimum();","\t\t\t\t\t\te.data = e.property.value > maximum","\t\t\t\t\t\t\t? current >= maximum ? minimum : maximum","\t\t\t\t\t\t\t: e.property.value < minimum ? maximum : e.property.value;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}, this),","\t\t\t'changed.owl.carousel': $.proxy(function(e) {","\t\t\t\tif (e.property.name == 'position') {","\t\t\t\t\tthis.draw();","\t\t\t\t}","\t\t\t}, this),","\t\t\t'refreshed.owl.carousel': $.proxy(function() {","\t\t\t\tif (!this._initialized) {","\t\t\t\t\tthis.initialize();","\t\t\t\t\tthis._initialized = true;","\t\t\t\t}","\t\t\t\tthis._core.trigger('refresh', null, 'navigation');","\t\t\t\tthis.update();","\t\t\t\tthis.draw();","\t\t\t\tthis._core.trigger('refreshed', null, 'navigation');","\t\t\t}, this)","\t\t};","","\t\t// set default options","\t\tthis._core.options = $.extend({}, Navigation.Defaults, this._core.options);","","\t\t// register event handlers","\t\tthis.$element.on(this._handlers);","\t}","","\t/**","\t * Default options.","\t * @public","\t * @todo Rename `slideBy` to `navBy`","\t */","\tNavigation.Defaults = {","\t\tnav: false,","\t\tnavRewind: true,","\t\tnavText: [ 'prev', 'next' ],","\t\tnavSpeed: false,","\t\tnavElement: 'div',","\t\tnavContainer: false,","\t\tnavContainerClass: 'owl-nav',","\t\tnavClass: [ 'owl-prev', 'owl-next' ],","\t\tslideBy: 1,","\t\tdotClass: 'owl-dot',","\t\tdotsClass: 'owl-dots',","\t\tdots: true,","\t\tdotsEach: false,","\t\tdotData: false,","\t\tdotsSpeed: false,","\t\tdotsContainer: false,","\t\tcontrolsClass: 'owl-controls'","\t}","","\t/**","\t * Initializes the layout of the plugin and extends the carousel.","\t * @protected","\t */","\tNavigation.prototype.initialize = function() {","\t\tvar $container, override,","\t\t\toptions = this._core.settings;","","\t\t// create the indicator template","\t\tif (!options.dotsData) {","\t\t\tthis._templates = [ $('<div>')","\t\t\t\t.addClass(options.dotClass)","\t\t\t\t.append($('<span>'))","\t\t\t\t.prop('outerHTML') ];","\t\t}","","\t\t// create controls container if needed","\t\tif (!options.navContainer || !options.dotsContainer) {","\t\t\tthis._controls.$container = $('<div>')","\t\t\t\t.addClass(options.controlsClass)","\t\t\t\t.appendTo(this.$element);","\t\t}","","\t\t// create DOM structure for absolute navigation","\t\tthis._controls.$indicators = options.dotsContainer ? $(options.dotsContainer)","\t\t\t: $('<div>').hide().addClass(options.dotsClass).appendTo(this._controls.$container);","","\t\tthis._controls.$indicators.on('click', 'div', $.proxy(function(e) {","\t\t\tvar index = $(e.target).parent().is(this._controls.$indicators)","\t\t\t\t? $(e.target).index() : $(e.target).parent().index();","","\t\t\te.preventDefault();","","\t\t\tthis.to(index, options.dotsSpeed);","\t\t}, this));","","\t\t// create DOM structure for relative navigation","\t\t$container = options.navContainer ? $(options.navContainer)","\t\t\t: $('<div>').addClass(options.navContainerClass).prependTo(this._controls.$container);","","\t\tthis._controls.$next = $('<' + options.navElement + '>');","\t\tthis._controls.$previous = this._controls.$next.clone();","","\t\tthis._controls.$previous","\t\t\t.addClass(options.navClass[0])","\t\t\t.html(options.navText[0])","\t\t\t.hide()","\t\t\t.prependTo($container)","\t\t\t.on('click', $.proxy(function(e) {","\t\t\t\tthis.prev(options.navSpeed);","\t\t\t}, this));","\t\tthis._controls.$next","\t\t\t.addClass(options.navClass[1])","\t\t\t.html(options.navText[1])","\t\t\t.hide()","\t\t\t.appendTo($container)","\t\t\t.on('click', $.proxy(function(e) {","\t\t\t\tthis.next(options.navSpeed);","\t\t\t}, this));","","\t\t// override public methods of the carousel","\t\tfor (override in this._overrides) {","\t\t\tthis._core[override] = $.proxy(this[override], this);","\t\t}","\t}","","\t/**","\t * Destroys the plugin.","\t * @protected","\t */","\tNavigation.prototype.destroy = function() {","\t\tvar handler, control, property, override;","","\t\tfor (handler in this._handlers) {","\t\t\tthis.$element.off(handler, this._handlers[handler]);","\t\t}","\t\tfor (control in this._controls) {","\t\t\tthis._controls[control].remove();","\t\t}","\t\tfor (override in this.overides) {","\t\t\tthis._core[override] = this._overrides[override];","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t}","","\t/**","\t * Updates the internal state.","\t * @protected","\t */","\tNavigation.prototype.update = function() {","\t\tvar i, j, k,","\t\t\toptions = this._core.settings,","\t\t\tlower = this._core.clones().length / 2,","\t\t\tupper = lower + this._core.items().length,","\t\t\tsize = options.center || options.autoWidth || options.dotData","\t\t\t\t? 1 : options.dotsEach || options.items;","","\t\tif (options.slideBy !== 'page') {","\t\t\toptions.slideBy = Math.min(options.slideBy, options.items);","\t\t}","","\t\tif (options.dots || options.slideBy == 'page') {","\t\t\tthis._pages = [];","","\t\t\tfor (i = lower, j = 0, k = 0; i < upper; i++) {","\t\t\t\tif (j >= size || j === 0) {","\t\t\t\t\tthis._pages.push({","\t\t\t\t\t\tstart: i - lower,","\t\t\t\t\t\tend: i - lower + size - 1","\t\t\t\t\t});","\t\t\t\t\tj = 0, ++k;","\t\t\t\t}","\t\t\t\tj += this._core.mergers(this._core.relative(i));","\t\t\t}","\t\t}","\t}","","\t/**","\t * Draws the user interface.","\t * @todo The option `dotData` wont work.","\t * @protected","\t */","\tNavigation.prototype.draw = function() {","\t\tvar difference, i, html = '',","\t\t\toptions = this._core.settings,","\t\t\t$items = this._core.$stage.children(),","\t\t\tindex = this._core.relative(this._core.current());","","\t\tif (options.nav && !options.loop && !options.navRewind) {","\t\t\tthis._controls.$previous.toggleClass('disabled', index <= 0);","\t\t\tthis._controls.$next.toggleClass('disabled', index >= this._core.maximum());","\t\t}","","\t\tthis._controls.$previous.toggle(options.nav);","\t\tthis._controls.$next.toggle(options.nav);","","\t\tif (options.dots) {","\t\t\tdifference = this._pages.length - this._controls.$indicators.children().length;","","\t\t\tif (options.dotData && difference !== 0) {","\t\t\t\tfor (i = 0; i < this._controls.$indicators.children().length; i++) {","\t\t\t\t\thtml += this._templates[this._core.relative(i)];","\t\t\t\t}","\t\t\t\tthis._controls.$indicators.html(html);","\t\t\t} else if (difference > 0) {","\t\t\t\thtml = new Array(difference + 1).join(this._templates[0]);","\t\t\t\tthis._controls.$indicators.append(html);","\t\t\t} else if (difference < 0) {","\t\t\t\tthis._controls.$indicators.children().slice(difference).remove();","\t\t\t}","","\t\t\tthis._controls.$indicators.find('.active').removeClass('active');","\t\t\tthis._controls.$indicators.children().eq($.inArray(this.current(), this._pages)).addClass('active');","\t\t}","","\t\tthis._controls.$indicators.toggle(options.dots);","\t}","","\t/**","\t * Extends event data.","\t * @protected","\t * @param {Event} event - The event object which gets thrown.","\t */","\tNavigation.prototype.onTrigger = function(event) {","\t\tvar settings = this._core.settings;","","\t\tevent.page = {","\t\t\tindex: $.inArray(this.current(), this._pages),","\t\t\tcount: this._pages.length,","\t\t\tsize: settings && (settings.center || settings.autoWidth || settings.dotData","\t\t\t\t? 1 : settings.dotsEach || settings.items)","\t\t};","\t}","","\t/**","\t * Gets the current page position of the carousel.","\t * @protected","\t * @returns {Number}","\t */","\tNavigation.prototype.current = function() {","\t\tvar index = this._core.relative(this._core.current());","\t\treturn $.grep(this._pages, function(o) {","\t\t\treturn o.start <= index && o.end >= index;","\t\t}).pop();","\t}","","\t/**","\t * Gets the current succesor/predecessor position.","\t * @protected","\t * @returns {Number}","\t */","\tNavigation.prototype.getPosition = function(successor) {","\t\tvar position, length,","\t\t\toptions = this._core.settings;","","\t\tif (options.slideBy == 'page') {","\t\t\tposition = $.inArray(this.current(), this._pages);","\t\t\tlength = this._pages.length;","\t\t\tsuccessor ? ++position : --position;","\t\t\tposition = this._pages[((position % length) + length) % length].start;","\t\t} else {","\t\t\tposition = this._core.relative(this._core.current());","\t\t\tlength = this._core.items().length;","\t\t\tsuccessor ? position += options.slideBy : position -= options.slideBy;","\t\t}","\t\treturn position;","\t}","","\t/**","\t * Slides to the next item or page.","\t * @public","\t * @param {Number} [speed=false] - The time in milliseconds for the transition.","\t */","\tNavigation.prototype.next = function(speed) {","\t\t$.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);","\t}","","\t/**","\t * Slides to the previous item or page.","\t * @public","\t * @param {Number} [speed=false] - The time in milliseconds for the transition.","\t */","\tNavigation.prototype.prev = function(speed) {","\t\t$.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);","\t}","","\t/**","\t * Slides to the specified item or page.","\t * @public","\t * @param {Number} position - The position of the item or page.","\t * @param {Number} [speed] - The time in milliseconds for the transition.","\t * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.","\t */","\tNavigation.prototype.to = function(position, speed, standard) {","\t\tvar length;","","\t\tif (!standard) {","\t\t\tlength = this._pages.length;","\t\t\t$.proxy(this._overrides.to, this._core)(this._pages[((position % length) + length) % length].start, speed);","\t\t} else {","\t\t\t$.proxy(this._overrides.to, this._core)(position, speed);","\t\t}","\t}","","\t$.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;","","})(window.Zepto || window.jQuery, window, document);","","/**"," * Hash Plugin"," * @version 2.0.0"," * @author Artus Kolanowski"," * @license The MIT License (MIT)"," */",";(function($, window, document, undefined) {","\t'use strict';","","\t/**","\t * Creates the hash plugin.","\t * @class The Hash Plugin","\t * @param {Owl} carousel - The Owl Carousel","\t */","\tvar Hash = function(carousel) {","\t\t/**","\t\t * Reference to the core.","\t\t * @protected","\t\t * @type {Owl}","\t\t */","\t\tthis._core = carousel;","","\t\t/**","\t\t * Hash table for the hashes.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._hashes = {};","","\t\t/**","\t\t * The carousel element.","\t\t * @type {jQuery}","\t\t */","\t\tthis.$element = this._core.$element;","","\t\t/**","\t\t * All event handlers.","\t\t * @protected","\t\t * @type {Object}","\t\t */","\t\tthis._handlers = {","\t\t\t'initialized.owl.carousel': $.proxy(function() {","\t\t\t\tif (this._core.settings.startPosition == 'URLHash') {","\t\t\t\t\t$(window).trigger('hashchange.owl.navigation');","\t\t\t\t}","\t\t\t}, this),","\t\t\t'prepared.owl.carousel': $.proxy(function(e) {","\t\t\t\tvar hash = $(e.content).find('[data-hash]').andSelf('[data-hash]').attr('data-hash');","\t\t\t\tthis._hashes[hash] = e.content;","\t\t\t}, this)","\t\t};","","\t\t// set default options","\t\tthis._core.options = $.extend({}, Hash.Defaults, this._core.options);","","\t\t// register the event handlers","\t\tthis.$element.on(this._handlers);","","\t\t// register event listener for hash navigation","\t\t$(window).on('hashchange.owl.navigation', $.proxy(function() {","\t\t\tvar hash = window.location.hash.substring(1),","\t\t\t\titems = this._core.$stage.children(),","\t\t\t\tposition = this._hashes[hash] && items.index(this._hashes[hash]) || 0;","","\t\t\tif (!hash) {","\t\t\t\treturn false;","\t\t\t}","","\t\t\tthis._core.to(position, false, true);","\t\t}, this));","\t}","","\t/**","\t * Default options.","\t * @public","\t */","\tHash.Defaults = {","\t\tURLhashListener: false","\t}","","\t/**","\t * Destroys the plugin.","\t * @public","\t */","\tHash.prototype.destroy = function() {","\t\tvar handler, property;","","\t\t$(window).off('hashchange.owl.navigation');","","\t\tfor (handler in this._handlers) {","\t\t\tthis._core.$element.off(handler, this._handlers[handler]);","\t\t}","\t\tfor (property in Object.getOwnPropertyNames(this)) {","\t\t\ttypeof this[property] != 'function' && (this[property] = null);","\t\t}","\t}","","\t$.fn.owlCarousel.Constructor.Plugins.Hash = Hash;","","})(window.Zepto || window.jQuery, window, document);",""]}]}]]},"ace":{"folds":[],"scrolltop":43790.00175666809,"scrollleft":0,"selection":{"start":{"row":3046,"column":22},"end":{"row":3046,"column":22},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":116,"mode":"ace/mode/javascript"}},"timestamp":1421050671841,"hash":"7b1383e0e4312c46280ddf91931e32f6e9f8de1c"}